/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaPreliminar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,10],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[5,14,18,21,28,29,30,31,32,33,35,42],$Vb=[1,29],$Vc=[14,37],$Vd=[2,23],$Ve=[11,22],$Vf=[1,40],$Vg=[1,51],$Vh=[1,55],$Vi=[1,53],$Vj=[1,54],$Vk=[1,56],$Vl=[1,58],$Vm=[1,59],$Vn=[1,60],$Vo=[1,61],$Vp=[1,62],$Vq=[1,38],$Vr=[1,39],$Vs=[1,41],$Vt=[1,42],$Vu=[1,43],$Vv=[1,44],$Vw=[1,45],$Vx=[1,46],$Vy=[1,47],$Vz=[5,14,18,21,28,29,30,31,32,33,35,42,44],$VA=[1,76],$VB=[1,80],$VC=[1,78],$VD=[1,79],$VE=[1,81],$VF=[1,82],$VG=[1,83],$VH=[1,84],$VI=[1,85],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[1,89],$VN=[1,90],$VO=[1,91],$VP=[1,92],$VQ=[1,93],$VR=[11,22,26,52,53,54,55,56,57,58,59,60,61,62,63,64,65,74,75],$VS=[1,105],$VT=[22,26],$VU=[1,107],$VV=[21,22],$VW=[11,22,26,52,53,54,55,56,57,58,59,60,61,62,63,64,65],$VX=[1,142],$VY=[11,22,26,52,53,54,58,59,60,61,62,63,64,65],$VZ=[11,22,26,58,59,60,61,62,63,64,65],$V_=[11,22,26,64,65];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"impresion":9,"llamada":10,";":11,"cond_if":12,"tipo":13,"ID":14,"=":15,"expresion":16,"lista_declaracion":17,"RSTRUCT":18,"{":19,"lista_atributos":20,"}":21,",":22,"atributo":23,"(":24,"lista_parametros":25,")":26,"tipo_primitivo":27,"RINT":28,"RDOUBLE":29,"RSTRING":30,"RBOOLEAN":31,"RCHAR":32,"RPRINTLN":33,"lista_impresion":34,"RPRINT":35,"nativas":36,".":37,"RPARSE":38,"RTOINT":39,"RTODOUBLE":40,"RTYPEOF":41,"RIF":42,"bloque_instrucciones":43,"RELSE":44,"tipo_func_arit":45,"RPOW":46,"RSQRT":47,"RSIN":48,"RCOS":49,"RTAN":50,"func_arit":51,"-":52,"&":53,"+":54,"*":55,"/":56,"%":57,"<":58,">":59,"<=":60,">=":61,"==":62,"!=":63,"&&":64,"||":65,"!":66,"ENTERO":67,"DECIMAL":68,"RTRUE":69,"RFALSE":70,"CADENA":71,"CARACTER":72,"RNULL":73,"++":74,"--":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:";",14:"ID",15:"=",18:"RSTRUCT",19:"{",21:"}",22:",",24:"(",26:")",28:"RINT",29:"RDOUBLE",30:"RSTRING",31:"RBOOLEAN",32:"RCHAR",33:"RPRINTLN",35:"RPRINT",37:".",38:"RPARSE",39:"RTOINT",40:"RTODOUBLE",41:"RTYPEOF",42:"RIF",44:"RELSE",46:"RPOW",47:"RSQRT",48:"RSIN",49:"RCOS",50:"RTAN",52:"-",53:"&",54:"+",55:"*",56:"/",57:"%",58:"<",59:">",60:"<=",61:">=",62:"==",63:"!=",64:"&&",65:"||",66:"!",67:"ENTERO",68:"DECIMAL",69:"RTRUE",70:"RFALSE",71:"CADENA",72:"CARACTER",73:"RNULL",74:"++",75:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,2],[6,1],[7,5],[7,3],[7,6],[20,3],[20,1],[23,2],[23,2],[17,3],[17,1],[8,4],[8,8],[13,1],[27,1],[27,1],[27,1],[27,1],[27,1],[9,5],[9,5],[34,3],[34,1],[10,4],[10,3],[25,3],[25,1],[36,6],[36,4],[36,4],[36,4],[36,4],[12,5],[12,7],[12,7],[43,3],[43,1],[43,1],[43,1],[43,2],[45,1],[45,1],[45,1],[45,1],[45,1],[51,4],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,2],[16,1],[16,1],[16,1],[16,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:$V0,18:$V1,27:15,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,35:$V8,42:$V9},{1:[3]},{5:[1,21],6:22,7:4,8:5,9:6,10:7,12:8,13:9,14:$V0,18:$V1,27:15,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,35:$V8,42:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),{11:[1,23]},o($Va,[2,8]),{14:[1,24],17:25},{14:[1,26]},{14:[1,28],15:[1,27],24:$Vb},{24:[1,30]},{24:[1,31]},{24:[1,32]},o($Vc,[2,20]),o($Vc,[2,21]),o($Vc,[2,22]),{14:$Vd},o($Vc,[2,24]),o($Vc,[2,25]),{1:[2,1]},o($Va,[2,2]),o($Va,[2,7]),o($Ve,[2,17],{15:[1,33]}),{11:[1,34],22:[1,35]},{19:[1,36]},{10:48,13:52,14:$Vf,16:37,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{15:[1,63]},{10:48,13:52,14:$Vf,16:66,24:$Vg,25:64,26:[1,65],27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:68,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,34:67,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:68,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,34:69,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:70,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:71,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},o($Vz,[2,10]),{14:[1,72]},{13:75,14:$VA,20:73,23:74,27:15,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6},{11:[1,77],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ},{10:48,13:52,14:$Vf,16:94,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:95,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},o($VR,[2,69],{24:$Vb}),o($VR,[2,70]),o($VR,[2,71]),o($VR,[2,72]),o($VR,[2,73]),o($VR,[2,74]),o($VR,[2,75]),o($VR,[2,76]),o($VR,[2,79]),o($VR,[2,80]),o($VR,[2,81]),{10:48,13:52,14:$Vf,16:96,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{37:[1,97]},{24:[1,98]},{24:[1,99]},{24:[1,100],37:$Vd},{24:[1,101]},{24:[1,102]},{24:[2,47]},{24:[2,48]},{24:[2,49]},{24:[2,50]},{24:[2,51]},{14:[1,103]},{22:$VS,26:[1,104]},o($VR,[2,31]),o($VT,[2,33],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ}),{22:$VU,26:[1,106]},o($VT,[2,29],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ}),{22:$VU,26:[1,108]},{26:[1,109],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ},{11:[1,110],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ},o($Ve,[2,16]),{21:[1,111],22:[1,112]},o($VV,[2,13]),{14:[1,113]},{14:[1,114]},o($Vz,[2,18]),{10:48,13:52,14:$Vf,16:115,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:116,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:117,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:118,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:119,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:120,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:121,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:122,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:123,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:124,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:125,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:126,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:127,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:128,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},o($VR,[2,77]),o($VR,[2,78]),o($VW,[2,53],{74:$VP,75:$VQ}),o($VW,[2,68],{74:$VP,75:$VQ}),{26:[1,129],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ},{38:[1,130]},{10:48,13:52,14:$Vf,16:131,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:132,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:133,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:134,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{10:48,13:52,14:$Vf,16:135,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{24:[1,136]},o($VR,[2,30]),{10:48,13:52,14:$Vf,16:137,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{11:[1,138]},{10:48,13:52,14:$Vf,16:139,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},{11:[1,140]},{7:143,8:144,9:145,10:146,13:9,14:$V0,18:$V1,19:$VX,27:15,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,35:$V8,43:141},o($Vz,[2,9]),{11:[1,147]},{13:75,14:$VA,23:148,27:15,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6},o($VV,[2,14]),o($VV,[2,15]),o($VY,[2,54],{55:$VE,56:$VF,57:$VG,74:$VP,75:$VQ}),o($VY,[2,55],{55:$VE,56:$VF,57:$VG,74:$VP,75:$VQ}),o($VY,[2,56],{55:$VE,56:$VF,57:$VG,74:$VP,75:$VQ}),o($VW,[2,57],{74:$VP,75:$VQ}),o($VW,[2,58],{74:$VP,75:$VQ}),o($VW,[2,59],{74:$VP,75:$VQ}),o($VZ,[2,60],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,74:$VP,75:$VQ}),o($VZ,[2,61],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,74:$VP,75:$VQ}),o($VZ,[2,62],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,74:$VP,75:$VQ}),o($VZ,[2,63],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,74:$VP,75:$VQ}),o($VZ,[2,64],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,74:$VP,75:$VQ}),o($VZ,[2,65],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,74:$VP,75:$VQ}),o($V_,[2,66],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,74:$VP,75:$VQ}),o($V_,[2,67],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,74:$VP,75:$VQ}),o($VR,[2,82]),{24:[1,149]},{26:[1,150],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ},{26:[1,151],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ},{26:[1,152],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ},{26:[1,153],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ},{26:[1,154],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ},{10:48,13:52,14:$Vf,16:66,24:$Vg,25:155,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},o($VT,[2,32],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ}),o($Vz,[2,26]),o($VT,[2,28],{52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ}),o($Vz,[2,27]),o($Va,[2,39],{44:[1,156]}),{4:157,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:$V0,18:$V1,27:15,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,35:$V8,42:$V9},o($Vz,[2,43]),o($Vz,[2,44]),o($Vz,[2,45]),{11:[1,158]},o($Vz,[2,11]),o($VV,[2,12]),{10:48,13:52,14:$Vf,16:159,24:$Vg,27:15,28:$V2,29:$V3,30:$Vh,31:$V5,32:$V6,36:49,39:$Vi,40:$Vj,41:$Vk,45:57,46:$Vl,47:$Vm,48:$Vn,49:$Vo,50:$Vp,51:50,52:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy},o($VR,[2,35]),o($VR,[2,36]),o($VR,[2,37]),o($VR,[2,38]),o($VR,[2,52]),{22:$VS,26:[1,160]},{7:143,8:144,9:145,10:146,12:161,13:9,14:$V0,18:$V1,19:$VX,27:15,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,35:$V8,42:$V9,43:162},{6:22,7:4,8:5,9:6,10:7,12:8,13:9,14:$V0,18:$V1,21:[1,163],27:15,28:$V2,29:$V3,30:$V4,31:$V5,32:$V6,33:$V7,35:$V8,42:$V9},o($Vz,[2,46]),{26:[1,164],52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,74:$VP,75:$VQ},{11:[1,165]},o($Va,[2,40]),o($Va,[2,41]),o($Vz,[2,42]),o($VR,[2,34]),o($Vz,[2,19])],
defaultActions: {18:[2,23],21:[2,1],58:[2,47],59:[2,48],60:[2,49],61:[2,50],62:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://'.*      /* skip comment */
break;
case 2:/* IGNORE */
break;
case 3:return 73;
break;
case 4:return 28;
break;
case 5:return 29;
break;
case 6:return 30;
break;
case 7:return 31;
break;
case 8:return 32
break;
case 9:return 69;
break;
case 10:return 70;
break;
case 11:return 18;
break;
case 12:return 35;
break;
case 13:return 33;
break;
case 14:return 46;
break;
case 15:return 48;
break;
case 16:return 49;
break;
case 17:return 50;
break;
case 18:return 'RLOG';
break;
case 19:return 47;
break;
case 20:return 39;
break;
case 21:return 40;
break;
case 22:return 41;
break;
case 23:return 'RFUNCTION';
break;
case 24:return 'RRETURN';
break;
case 25:return 42;
break;
case 26:return 44;
break;
case 27:return 'RSWITCH';
break;
case 28:return 'RCASE';
break;
case 29:return 'RDEFAULT';
break;
case 30:return 'RWHILE';
break;
case 31:return 'RDO';
break;
case 32:return 'RFOR';
break;
case 33:return 'RIN';
break;
case 34:return 'RPUSH';
break;
case 35:return 'RPOP';
break;
case 36:return 'RLENGTH';
break;
case 37:return 38;
break;
case 38:return 'RBREAK';
break;
case 39:return 'RCONTINUE';
break;
case 40:return ':';
break;
case 41:return 37;
break;
case 42:return 22;
break;
case 43:return 11;
break;
case 44:return 19;
break;
case 45:return 21;
break;
case 46:return 24;
break;
case 47:return 26;
break;
case 48:return '[';
break;
case 49:return ']';
break;
case 50:return 57;
break;
case 51:return 74;
break;
case 52:return 75;
break;
case 53:return 54;
break;
case 54:return '^';
break;
case 55:return 52;
break;
case 56:return 55;
break;
case 57:return 56;
break;
case 58:return 60;
break;
case 59:return 61;
break;
case 60:return 62;
break;
case 61:return 63;
break;
case 62:return 58;
break;
case 63:return 59;
break;
case 64:return 64;
break;
case 65:return 53;
break;
case 66:return 65;
break;
case 67:return 66;
break;
case 68:return 15;
break;
case 69:return '?';
break;
case 70: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 71; 
break;
case 71: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 72; 
break;
case 72:return 68;
break;
case 73:return 67;
break;
case 74:return 'BOOLEANO';
break;
case 75:return 14;
break;
case 76:return 5;
break;
case 77:console.log("Lexico", yy_.yytext,  yy_.yylloc.first_line, yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:struct\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:pow\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:sqrt\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:function\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:parse\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:\^)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:false|true\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaPreliminar;
exports.Parser = gramaticaPreliminar.Parser;
exports.parse = function () { return gramaticaPreliminar.parse.apply(gramaticaPreliminar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}