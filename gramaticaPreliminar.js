/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaPreliminar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,11],$V9=[1,12],$Va=[5,12,17,31,32,33,34,35,36,37,39],$Vb=[1,24],$Vc=[1,27],$Vd=[1,26],$Ve=[12,21,42],$Vf=[15,25],$Vg=[2,17],$Vh=[1,30],$Vi=[1,39],$Vj=[1,50],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,37],$Vu=[1,38],$Vv=[1,40],$Vw=[1,41],$Vx=[1,42],$Vy=[1,43],$Vz=[1,44],$VA=[1,45],$VB=[1,46],$VC=[1,71],$VD=[5,12,17,20,28,31,32,33,34,35,36,37,39,44,45,46,47,49,51,54,57,59,61,63,65,68,69,70,71,72,75,76,79,94,95,96,97,98,99,100,101],$VE=[1,92],$VF=[1,93],$VG=[1,79],$VH=[1,76],$VI=[1,77],$VJ=[1,78],$VK=[1,80],$VL=[1,81],$VM=[1,82],$VN=[1,83],$VO=[1,84],$VP=[1,85],$VQ=[1,86],$VR=[1,87],$VS=[1,88],$VT=[1,89],$VU=[1,90],$VV=[1,91],$VW=[15,22,25,29,58,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,102],$VX=[2,101],$VY=[1,97],$VZ=[1,96],$V_=[2,116],$V$=[1,100],$V01=[1,108],$V11=[25,29],$V21=[1,113],$V31=[20,25,29],$V41=[2,114],$V51=[2,115],$V61=[15,22,25,29,58,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,102],$V71=[1,165],$V81=[1,166],$V91=[1,167],$Va1=[1,168],$Vb1=[1,169],$Vc1=[1,170],$Vd1=[1,161],$Ve1=[1,162],$Vf1=[15,22,25,29,58,79,80,82,86,87,88,89,90,91,92,93,102],$Vg1=[15,22,25,29,58,86,87,88,89,90,91,92,93,102],$Vh1=[1,179],$Vi1=[22,25,29],$Vj1=[12,17,20,28,31,32,33,34,35,36,37,39,44,45,46,47,49,54,57,59,61,63,65,68,69,70,71,72,75,76,79,94,95,96,97,98,99,100,101],$Vk1=[77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,102],$Vl1=[1,196],$Vm1=[1,222],$Vn1=[15,29],$Vo1=[1,244],$Vp1=[1,238],$Vq1=[12,17,20,28,31,32,33,34,35,36,37,39,44,45,46,47,49,51,54,57,59,61,63,65,68,69,70,71,72,75,76,79,94,95,96,97,98,99,100,101],$Vr1=[1,256],$Vs1=[1,257],$Vt1=[20,57,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"impresion":9,"funciones":10,"tipo":11,"ID":12,"=":13,"expresion":14,";":15,"lista_declaracion":16,"RSTRUCT":17,"{":18,"lista_atributos":19,"}":20,"[":21,"]":22,"id":23,"cuerpo_array":24,",":25,"atributo":26,"lista_parametros":27,"(":28,")":29,"tipo_primitivo":30,"RINT":31,"RDOUBLE":32,"RSTRING":33,"RBOOLEAN":34,"RCHAR":35,"RVOID":36,"RPRINTLN":37,"lista_impresion":38,"RPRINT":39,"llamada":40,"nativas":41,".":42,"RPARSE":43,"RTOINT":44,"RTODOUBLE":45,"RSTRINGMIN":46,"RTYPEOF":47,"cond_if":48,"RIF":49,"bloque_instrucciones":50,"RELSE":51,"instrucciones_dentro":52,"cond_switch":53,"RSWITCH":54,"bloque_switch":55,"estructura_case":56,"RCASE":57,":":58,"RDEFAULT":59,"loop_while":60,"RWHILE":61,"loop_dowhile":62,"RDO":63,"loop_for":64,"RFOR":65,"declarar_asignar":66,"tipo_func_arit":67,"RPOW":68,"RSQRT":69,"RSIN":70,"RCOS":71,"RTAN":72,"func_arit":73,"instruccion_dentro":74,"RRETURN":75,"RBREAK":76,"++":77,"--":78,"-":79,"&":80,"^":81,"+":82,"*":83,"/":84,"%":85,"<":86,">":87,"<=":88,">=":89,"==":90,"!=":91,"&&":92,"||":93,"!":94,"ENTERO":95,"DECIMAL":96,"RTRUE":97,"RFALSE":98,"CADENA":99,"CARACTER":100,"RNULL":101,"?":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"ID",13:"=",15:";",17:"RSTRUCT",18:"{",20:"}",21:"[",22:"]",23:"id",25:",",28:"(",29:")",31:"RINT",32:"RDOUBLE",33:"RSTRING",34:"RBOOLEAN",35:"RCHAR",36:"RVOID",37:"RPRINTLN",39:"RPRINT",42:".",43:"RPARSE",44:"RTOINT",45:"RTODOUBLE",46:"RSTRINGMIN",47:"RTYPEOF",49:"RIF",51:"RELSE",54:"RSWITCH",57:"RCASE",58:":",59:"RDEFAULT",61:"RWHILE",63:"RDO",65:"RFOR",68:"RPOW",69:"RSQRT",70:"RSIN",71:"RCOS",72:"RTAN",75:"RRETURN",76:"RBREAK",77:"++",78:"--",79:"-",80:"&",81:"^",82:"+",83:"*",84:"/",85:"%",86:"<",87:">",88:"<=",89:">=",90:"==",91:"!=",92:"&&",93:"||",94:"!",95:"ENTERO",96:"DECIMAL",97:"RTRUE",98:"RFALSE",99:"CADENA",100:"CARACTER",101:"RNULL",102:"?"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[7,6],[7,7],[19,3],[19,1],[26,2],[26,2],[16,3],[16,1],[24,3],[8,4],[8,8],[11,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[9,5],[9,5],[38,3],[38,1],[40,4],[40,3],[27,3],[27,1],[41,6],[41,4],[41,4],[41,4],[41,4],[48,5],[48,7],[48,7],[50,3],[50,1],[50,1],[50,1],[50,2],[53,7],[55,2],[55,1],[56,4],[56,3],[60,7],[62,9],[64,11],[66,4],[66,3],[66,1],[10,7],[10,8],[67,1],[67,1],[67,1],[67,1],[67,1],[73,4],[52,2],[52,1],[74,1],[74,1],[74,1],[74,2],[74,1],[74,1],[74,1],[74,1],[74,1],[74,2],[74,3],[74,2],[74,3],[74,3],[14,2],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,2],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,5],[14,6],[14,5],[14,6],[14,5],[14,2],[14,2],[14,1],[14,1],[14,1],[14,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,17:$V1,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9},{1:[3]},{5:[1,20],6:21,7:4,8:5,9:6,10:7,11:8,12:$V0,17:$V1,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),{12:[1,22],16:23,21:$Vb},{12:[1,25]},{12:$Vc,13:$Vd},{28:[1,28]},{28:[1,29]},o($Ve,[2,21]),o($Ve,[2,22]),o($Ve,[2,23]),o($Ve,[2,24]),o($Ve,[2,25]),o($Ve,[2,26]),o($Ve,[2,27]),{1:[2,1]},o($Va,[2,2]),o($Vf,$Vg,{13:$Vh,28:[1,31]}),{15:[1,32],25:[1,33]},{22:[1,34]},{18:[1,35]},{11:51,12:$Vi,14:36,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{13:[1,62]},{11:51,12:$Vi,14:64,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:63,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:64,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,38:65,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:66,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:70,12:$VC,19:68,26:69,29:[1,67],30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},o($VD,[2,9]),{12:[1,72]},{23:[1,73]},{11:70,12:$VC,19:74,26:69,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},{15:[1,75],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{11:51,12:$Vi,14:94,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:95,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($VW,$VX,{28:$VY,42:$VZ}),o($VW,[2,102]),o($VW,[2,103]),o($VW,[2,104]),o($VW,[2,105]),o($VW,[2,106],{42:[1,98]}),o($VW,[2,107]),o($VW,[2,108]),o($VW,$V_),o($VW,[2,117]),o($VW,[2,118]),{11:51,12:$Vi,14:99,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{42:$V$},{28:[1,101]},{28:[1,102]},{28:[1,103]},{28:[1,104]},{28:[1,105]},{28:[2,62]},{28:[2,63]},{28:[2,64]},{28:[2,65]},{28:[2,66]},{12:[1,106]},{25:$V01,29:[1,107]},o($V11,[2,31],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV}),{25:$V01,29:[1,109]},{15:[1,110],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{18:[1,111]},{25:$V21,29:[1,112]},o($V31,[2,13]),{12:[1,114]},{12:[1,115]},o($Vf,[2,16]),{13:[1,116]},{20:[1,117],25:$V21},o($VD,[2,19]),{11:51,12:$Vi,14:118,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:119,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:120,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:121,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:122,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:123,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:124,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:125,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:126,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:127,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:128,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:129,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:130,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:131,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:132,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:133,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($VW,$V41),o($VW,$V51),o($V61,[2,84],{77:$VE,78:$VF}),o($V61,[2,100],{77:$VE,78:$VF}),{12:[1,134]},{11:51,12:$Vi,14:137,27:135,28:$Vj,29:[1,136],30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{12:[1,138]},{29:[1,139],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{43:[1,140]},{11:51,12:$Vi,14:141,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:142,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:143,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:144,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:145,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:[1,146]},{15:[1,147]},{11:51,12:$Vi,14:148,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{15:[1,149]},o($VD,[2,8]),{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,52:150,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:151,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{18:[1,171]},{11:70,12:$VC,26:172,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7},o($V31,[2,14]),o($V31,[2,15]),{21:[1,174],24:173},{15:[1,175]},o($Vf1,[2,85],{77:$VE,78:$VF,81:$VI,83:$VK,84:$VL,85:$VM}),o($V61,[2,86],{77:$VE,78:$VF}),o($Vf1,[2,87],{77:$VE,78:$VF,81:$VI,83:$VK,84:$VL,85:$VM}),o($Vf1,[2,88],{77:$VE,78:$VF,81:$VI,83:$VK,84:$VL,85:$VM}),o($V61,[2,89],{77:$VE,78:$VF}),o($V61,[2,90],{77:$VE,78:$VF}),o($V61,[2,91],{77:$VE,78:$VF}),o($Vg1,[2,92],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),o($Vg1,[2,93],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),o($Vg1,[2,94],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),o($Vg1,[2,95],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),o($Vg1,[2,96],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),o($Vg1,[2,97],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM}),o([15,22,25,29,58,92,93,102],[2,98],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS}),o([15,22,25,29,58,93,102],[2,99],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT}),{58:[1,176],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{28:[1,177]},{25:$Vh1,29:[1,178]},o($VW,[2,33]),o($Vi1,[2,35],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV}),{28:[1,180]},o($VW,[2,119]),{28:[1,181]},{29:[1,182],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{29:[1,183],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{29:[1,184],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{29:[1,185],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{29:[1,186],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{11:51,12:$Vi,14:137,27:187,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($VD,[2,28]),o($V11,[2,30],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV}),o($VD,[2,29]),{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,20:[1,188],28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:189,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vj1,[2,69]),o($Vj1,[2,70]),o($Vj1,[2,71]),o($Vj1,[2,72]),o($Vk1,$V_,{15:[1,190]}),o($Vj1,[2,74]),o($Vj1,[2,75]),o($Vj1,[2,76]),o($Vj1,[2,77]),o($Vj1,[2,78]),{11:51,12:$Vi,14:192,15:[1,191],28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{15:[1,193]},{77:[1,194],78:[1,195],79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{12:$Vl1,16:23,21:$Vb,42:$V$},o($Vk1,$VX,{12:$Vc,13:$Vd,28:$VY,42:$VZ}),{28:[1,197]},{28:[1,198]},{28:[1,199]},{18:[1,200]},{28:[1,201]},{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,52:202,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:151,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($V31,[2,12]),{15:[1,203]},{11:51,12:$Vi,14:137,27:204,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($VD,[2,10]),{11:51,12:$Vi,14:205,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:137,27:207,28:$Vj,29:[1,206],30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($VW,[2,32]),{11:51,12:$Vi,14:208,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:137,27:210,28:$Vj,29:[1,209],30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:211,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($VW,[2,37]),o($VW,[2,38]),o($VW,[2,39]),o($VW,[2,40]),o($VW,[2,67]),{25:$Vh1,29:[1,212]},o($Va,[2,60]),o($Vj1,[2,68]),o($Vj1,[2,73]),o($Vj1,[2,79]),{15:[1,213],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},o($Vj1,[2,81]),o($Vk1,$V41,{15:[1,214]}),o($Vk1,$V51,{15:[1,215]}),o($Vf,$Vg,{13:$Vh}),{11:51,12:$Vi,14:216,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:217,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:218,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,52:219,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:151,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:221,12:$Vm1,14:223,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,66:220,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,20:[1,224],28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:189,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($VD,[2,11]),{22:[1,225],25:$Vh1},o([15,22,25,29,58],[2,113],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV}),o($VW,[2,109]),{25:$Vh1,29:[1,226]},o($Vi1,[2,34],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV}),o($VW,[2,111]),{25:$Vh1,29:[1,227]},{29:[1,228],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{15:[1,229]},o($Vj1,[2,80]),o($Vj1,[2,82]),o($Vj1,[2,83]),{29:[1,230],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{29:[1,231],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{29:[1,232],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,20:[1,233],28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:189,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{15:[1,234]},{12:[1,235],42:$V$},o([15,29,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,102],$VX,{13:[1,236],28:$VY,42:$VZ}),o($Vn1,[2,59],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV}),o($Va,[2,61]),{15:[2,18]},o($VW,[2,110]),o($VW,[2,112]),o($VW,[2,36]),o($VD,[2,20]),{7:239,8:240,9:241,11:243,12:$Vo1,17:$V1,18:$Vp1,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:242,50:237},{18:[1,245]},{18:[1,246]},{61:[1,247]},{11:51,12:$Vi,14:248,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{13:[1,249]},{11:51,12:$Vi,14:250,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vj1,[2,41],{51:[1,251]}),{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,52:252,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:151,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vq1,[2,45]),o($Vq1,[2,46]),o($Vq1,[2,47]),{15:[1,253]},{12:$Vl1,16:23,21:$Vb},{12:$Vc,13:$Vd,28:$VY},{55:254,56:255,57:$Vr1,59:$Vs1},{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,52:258,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:151,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{28:[1,259]},{15:[1,260],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{11:51,12:$Vi,14:261,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vn1,[2,58],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV}),{7:239,8:240,9:241,11:243,12:$Vo1,17:$V1,18:$Vp1,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:242,48:262,49:$V81,50:263},{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,20:[1,264],28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:189,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vq1,[2,48]),{20:[1,265],56:266,57:$Vr1,59:$Vs1},o($Vt1,[2,51]),{11:51,12:$Vi,14:267,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{58:[1,268]},{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,20:[1,269],28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:189,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:51,12:$Vi,14:270,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{11:221,12:$Vm1,14:223,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,40:47,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,66:271,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vn1,[2,57],{77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV}),o($Vj1,[2,42]),o($Vj1,[2,43]),o($Vq1,[2,44]),o($Vj1,[2,49]),o($Vt1,[2,50]),{58:[1,272],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,52:273,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:151,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vj1,[2,54]),{29:[1,274],77:$VE,78:$VF,79:$VG,80:$VH,81:$VI,82:$VJ,83:$VK,84:$VL,85:$VM,86:$VN,87:$VO,88:$VP,89:$VQ,90:$VR,91:$VS,92:$VT,93:$VU,102:$VV},{29:[1,275]},{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,52:276,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:151,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vt1,[2,53],{30:13,41:48,73:49,67:56,7:152,8:153,9:154,40:155,48:156,53:157,60:158,62:159,64:160,14:163,11:164,74:189,12:$V71,17:$V1,28:$Vj,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,44:$Vk,45:$Vl,46:$Vm,47:$Vn,49:$V81,54:$V91,61:$Va1,63:$Vb1,65:$Vc1,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB}),{15:[1,277]},{18:[1,278]},o($Vt1,[2,52],{30:13,41:48,73:49,67:56,7:152,8:153,9:154,40:155,48:156,53:157,60:158,62:159,64:160,14:163,11:164,74:189,12:$V71,17:$V1,28:$Vj,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,44:$Vk,45:$Vl,46:$Vm,47:$Vn,49:$V81,54:$V91,61:$Va1,63:$Vb1,65:$Vc1,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB}),o($Vj1,[2,55]),{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,52:279,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:151,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},{7:152,8:153,9:154,11:164,12:$V71,14:163,17:$V1,20:[1,280],28:$Vj,30:13,31:$V2,32:$V3,33:$V4,34:$V5,35:$V6,36:$V7,37:$V8,39:$V9,40:155,41:48,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:156,49:$V81,53:157,54:$V91,60:158,61:$Va1,62:159,63:$Vb1,64:160,65:$Vc1,67:56,68:$Vo,69:$Vp,70:$Vq,71:$Vr,72:$Vs,73:49,74:189,75:$Vd1,76:$Ve1,79:$Vt,94:$Vu,95:$Vv,96:$Vw,97:$Vx,98:$Vy,99:$Vz,100:$VA,101:$VB},o($Vj1,[2,56])],
defaultActions: {20:[2,1],57:[2,62],58:[2,63],59:[2,64],60:[2,65],61:[2,66],225:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://'.*      /* skip comment */
break;
case 2:/* IGNORE */
break;
case 3:return 36;
break;
case 4:return 101;
break;
case 5:return 31;
break;
case 6:return 32;
break;
case 7:return 33;
break;
case 8:return 46;
break;
case 9:return 34;
break;
case 10:return 35
break;
case 11:return 97;
break;
case 12:return 98;
break;
case 13:return 17;
break;
case 14:return 39;
break;
case 15:return 37;
break;
case 16:return 68;
break;
case 17:return 70;
break;
case 18:return 71;
break;
case 19:return 72;
break;
case 20:return 'RLOG';
break;
case 21:return 69;
break;
case 22:return 44;
break;
case 23:return 45;
break;
case 24:return 47;
break;
case 25:return 75;
break;
case 26:return 49;
break;
case 27:return 51;
break;
case 28:return 54;
break;
case 29:return 57;
break;
case 30:return 59;
break;
case 31:return 61;
break;
case 32:return 63;
break;
case 33:return 65;
break;
case 34:return 'RIN';
break;
case 35:return 'RPUSH';
break;
case 36:return 'RPOP';
break;
case 37:return 43;
break;
case 38:return 76;
break;
case 39:return 'RCONTINUE';
break;
case 40:return 58;
break;
case 41:return 42;
break;
case 42:return 25;
break;
case 43:return 15;
break;
case 44:return 18;
break;
case 45:return 20;
break;
case 46:return 28;
break;
case 47:return 29;
break;
case 48:return 21;
break;
case 49:return 22;
break;
case 50:return 85;
break;
case 51:return 77;
break;
case 52:return 78;
break;
case 53:return 82;
break;
case 54:return 81;
break;
case 55:return 79;
break;
case 56:return 83;
break;
case 57:return 84;
break;
case 58:return 88;
break;
case 59:return 89;
break;
case 60:return 90;
break;
case 61:return 91;
break;
case 62:return 86;
break;
case 63:return 87;
break;
case 64:return 92;
break;
case 65:return 80;
break;
case 66:return 93;
break;
case 67:return 94;
break;
case 68:return 13;
break;
case 69:return 102;
break;
case 70: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 99; 
break;
case 71: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 100; 
break;
case 72:return 96;
break;
case 73:return 95;
break;
case 74:return 'BOOLEANO';
break;
case 75:return 12;
break;
case 76:return 5;
break;
case 77:console.log("Lexico", yy_.yytext,  yy_.yylloc.first_line, yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:void\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:struct\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:pow\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:sqrt\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:parse\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:\^)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:false|true\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaPreliminar;
exports.Parser = gramaticaPreliminar.Parser;
exports.parse = function () { return gramaticaPreliminar.parse.apply(gramaticaPreliminar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}