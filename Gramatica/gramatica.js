/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,10],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,21],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[5,13,18,32,33,34,35,36,37,38,40,48],$Vc=[1,24],$Vd=[1,26],$Ve=[1,28],$Vf=[13,22,43],$Vg=[2,25],$Vh=[16,26],$Vi=[1,41],$Vj=[1,52],$Vk=[1,56],$Vl=[1,54],$Vm=[1,55],$Vn=[1,57],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,39],$Vu=[1,40],$Vv=[1,42],$Vw=[1,43],$Vx=[1,44],$Vy=[1,45],$Vz=[1,46],$VA=[1,47],$VB=[1,48],$VC=[1,64],$VD=[5,13,18,21,29,32,33,34,35,36,37,38,40,45,46,47,48,50,53,56,58,60,62,64,67,68,69,70,71,74,75,78,93,94,95,96,97,98,99,100],$VE=[1,76],$VF=[1,94],$VG=[1,95],$VH=[1,81],$VI=[1,78],$VJ=[1,79],$VK=[1,80],$VL=[1,82],$VM=[1,83],$VN=[1,84],$VO=[1,85],$VP=[1,86],$VQ=[1,87],$VR=[1,88],$VS=[1,89],$VT=[1,90],$VU=[1,91],$VV=[1,92],$VW=[1,93],$VX=[16,23,26,30,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$VY=[2,102],$VZ=[1,99],$V_=[1,98],$V$=[2,117],$V01=[1,102],$V11=[26,30],$V21=[1,118],$V31=[21,26,30],$V41=[2,115],$V51=[2,116],$V61=[16,23,26,30,57,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$V71=[1,161],$V81=[1,156],$V91=[16,23,26,30,57,78,79,81,85,86,87,88,89,90,91,92,101],$Va1=[16,23,26,30,57,85,86,87,88,89,90,91,92,101],$Vb1=[1,169],$Vc1=[23,26,30],$Vd1=[1,193],$Ve1=[1,194],$Vf1=[1,195],$Vg1=[1,196],$Vh1=[1,197],$Vi1=[1,189],$Vj1=[1,190],$Vk1=[5,13,18,21,29,32,33,34,35,36,37,38,40,45,46,47,48,53,56,58,60,62,64,67,68,69,70,71,74,75,78,93,94,95,96,97,98,99,100],$Vl1=[1,202],$Vm1=[13,18,21,29,32,33,34,35,36,37,38,40,45,46,47,48,53,56,58,60,62,64,67,68,69,70,71,74,75,78,93,94,95,96,97,98,99,100],$Vn1=[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$Vo1=[1,242],$Vp1=[16,30],$Vq1=[1,259],$Vr1=[1,260],$Vs1=[21,56,58];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"impresion":9,"funciones":10,"cond_if":11,"tipo":12,"ID":13,"=":14,"expresion":15,";":16,"lista_declaracion":17,"RSTRUCT":18,"{":19,"lista_atributos":20,"}":21,"[":22,"]":23,"id":24,"cuerpo_array":25,",":26,"atributo":27,"lista_parametros":28,"(":29,")":30,"tipo_primitivo":31,"RINT":32,"RDOUBLE":33,"RSTRING":34,"RBOOLEAN":35,"RCHAR":36,"RVOID":37,"RPRINTLN":38,"lista_impresion":39,"RPRINT":40,"llamada":41,"nativas":42,".":43,"RPARSE":44,"RTOINT":45,"RTODOUBLE":46,"RTYPEOF":47,"RIF":48,"bloque_instrucciones":49,"RELSE":50,"instrucciones_dentro":51,"cond_switch":52,"RSWITCH":53,"bloque_switch":54,"estructura_case":55,"RCASE":56,":":57,"RDEFAULT":58,"loop_while":59,"RWHILE":60,"loop_dowhile":61,"RDO":62,"loop_for":63,"RFOR":64,"declarar_asignar":65,"tipo_func_arit":66,"RPOW":67,"RSQRT":68,"RSIN":69,"RCOS":70,"RTAN":71,"func_arit":72,"instruccion_dentro":73,"RRETURN":74,"RBREAK":75,"++":76,"--":77,"-":78,"&":79,"^":80,"+":81,"*":82,"/":83,"%":84,"<":85,">":86,"<=":87,">=":88,"==":89,"!=":90,"&&":91,"||":92,"!":93,"ENTERO":94,"DECIMAL":95,"RTRUE":96,"RFALSE":97,"CADENA":98,"CARACTER":99,"RNULL":100,"?":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"ID",14:"=",16:";",18:"RSTRUCT",19:"{",21:"}",22:"[",23:"]",24:"id",26:",",29:"(",30:")",32:"RINT",33:"RDOUBLE",34:"RSTRING",35:"RBOOLEAN",36:"RCHAR",37:"RVOID",38:"RPRINTLN",40:"RPRINT",43:".",44:"RPARSE",45:"RTOINT",46:"RTODOUBLE",47:"RTYPEOF",48:"RIF",50:"RELSE",53:"RSWITCH",56:"RCASE",57:":",58:"RDEFAULT",60:"RWHILE",62:"RDO",64:"RFOR",67:"RPOW",68:"RSQRT",69:"RSIN",70:"RCOS",71:"RTAN",74:"RRETURN",75:"RBREAK",76:"++",77:"--",78:"-",79:"&",80:"^",81:"+",82:"*",83:"/",84:"%",85:"<",86:">",87:"<=",88:">=",89:"==",90:"!=",91:"&&",92:"||",93:"!",94:"ENTERO",95:"DECIMAL",96:"RTRUE",97:"RFALSE",98:"CADENA",99:"CARACTER",100:"RNULL",101:"?"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[7,6],[7,7],[20,3],[20,1],[27,2],[27,2],[17,3],[17,1],[25,3],[8,4],[8,8],[12,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[9,5],[9,5],[39,3],[39,1],[41,4],[41,3],[28,3],[28,1],[42,6],[42,4],[42,4],[42,4],[42,4],[11,5],[11,7],[11,7],[49,3],[49,1],[49,1],[49,1],[49,2],[52,7],[54,2],[54,1],[55,4],[55,4],[59,7],[61,9],[63,11],[65,4],[65,3],[65,1],[10,7],[10,8],[66,1],[66,1],[66,1],[66,1],[66,1],[72,4],[51,2],[51,1],[73,1],[73,1],[73,1],[73,2],[73,1],[73,1],[73,1],[73,1],[73,1],[73,2],[73,3],[73,2],[73,3],[73,3],[15,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,5],[15,6],[15,5],[15,6],[15,5],[15,2],[15,2],[15,1],[15,1],[15,1],[15,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new AST($$[$0-1]);
break;
case 2: case 69:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 32: case 70:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 8: case 22: case 73: case 75:
 this.$ = $$[$0] 
break;
case 9:
 this.$ = new Declaracion([$$[$0-3]],$$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column,$$[$0-1]); 
break;
case 10:
 this.$ = new Declaracion($$[$0-1], $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 17:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 18:
 this.$ = [$$[$0]] 
break;
case 20:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 23:
 this.$ =  Tipo.INT;
break;
case 24:
 this.$ =  Tipo.DOUBLE;
break;
case 25:
 this.$ =  Tipo.STRING;
break;
case 26:
 this.$ =  Tipo.BOOL;
break;
case 27:
 this.$ =  Tipo.CHAR;
break;
case 28:
 this.$ =  Tipo.VOID;
break;
case 30:
 this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 31:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 42:
 this.$ = new If($$[$0-2], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 44:
 this.$ = new If($$[$0-4], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 45:
 this.$ = $$[$0-2] 
break;
case 85:
 this.$ = new Operacion($$[$0],$$[$0],Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 86:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.CONCATENACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 87:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.REPETICION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 88:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 97:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 98:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 99:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 101:
 this.$ = new Operacion($$[$0],$$[$0],Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 102:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 103: case 104:
 this.$ = new Primitivo(Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 105:
 this.$ = new Primitivo(true,  this._$.first_line, this._$.first_column); 
break;
case 106:
 this.$ = new Primitivo(false, this._$.first_line, this._$.first_column); 
break;
case 107: case 108:
 this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 109:
 this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 120:
 this.$ = $$[$0-1] 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,18:$V1,31:15,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,48:$Va},{1:[3]},{5:[1,22],6:23,7:4,8:5,9:6,10:7,11:8,12:9,13:$V0,18:$V1,31:15,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,48:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),{13:$Vc,17:25,22:$Vd},{13:[1,27]},{13:[1,29],14:$Ve},{29:[1,30]},{29:[1,31]},{29:[1,32]},o($Vf,[2,22]),o($Vf,[2,23]),o($Vf,[2,24]),o([13,22],$Vg),o($Vf,[2,26]),o($Vf,[2,27]),o($Vf,[2,28]),{1:[2,1]},o($Vb,[2,2]),o($Vh,[2,18],{14:[1,33]}),{16:[1,34],26:[1,35]},{23:[1,36]},{19:[1,37]},{12:53,13:$Vi,15:38,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{14:$VC,29:[1,65]},{12:53,13:$Vi,15:67,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,39:66,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:68,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:69,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:70,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($VD,[2,10]),{13:[1,71]},{24:[1,72]},{12:75,13:$VE,20:73,27:74,31:15,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7},{16:[1,77],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{12:53,13:$Vi,15:96,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:97,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($VX,$VY,{29:$VZ,43:$V_}),o($VX,[2,103]),o($VX,[2,104]),o($VX,[2,105]),o($VX,[2,106]),o($VX,[2,107],{43:[1,100]}),o($VX,[2,108]),o($VX,[2,109]),o($VX,$V$),o($VX,[2,118]),o($VX,[2,119]),{12:53,13:$Vi,15:101,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{43:$V01},{29:[1,103]},{29:[1,104]},o($Vf,$Vg,{29:[1,105]}),{29:[1,106]},{29:[1,107]},{29:[2,63]},{29:[2,64]},{29:[2,65]},{29:[2,66]},{29:[2,67]},{13:[1,108]},{12:75,13:$VE,20:110,27:74,30:[1,109],31:15,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7},{26:[1,112],30:[1,111]},o($V11,[2,32],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW}),{30:[1,113],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{30:[1,114],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{16:[1,115],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},o($Vh,[2,17]),{14:[1,116]},{21:[1,117],26:$V21},o($V31,[2,14]),{13:[1,119]},{13:[1,120]},o($VD,[2,20]),{12:53,13:$Vi,15:121,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:122,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:123,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:124,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:125,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:126,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:127,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:128,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:129,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:130,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:131,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:132,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:133,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:134,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:135,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:136,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($VX,$V41),o($VX,$V51),o($V61,[2,85],{76:$VF,77:$VG}),o($V61,[2,101],{76:$VF,77:$VG}),{13:[1,137]},{12:53,13:$Vi,15:140,28:138,29:$Vj,30:[1,139],31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{13:[1,141]},{30:[1,142],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{44:[1,143]},{12:53,13:$Vi,15:144,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:145,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:146,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:147,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:148,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{29:[1,149]},{19:[1,150]},{26:$V21,30:[1,151]},{16:[1,152]},{12:53,13:$Vi,15:153,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{16:[1,154]},{7:157,8:158,9:159,12:9,13:$V71,18:$V1,19:$V81,31:15,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:160,49:155},o($VD,[2,9]),{22:[1,163],25:162},{16:[1,164]},{12:75,13:$VE,27:165,31:15,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7},o($V31,[2,15]),o($V31,[2,16]),o($V91,[2,86],{76:$VF,77:$VG,80:$VJ,82:$VL,83:$VM,84:$VN}),o($V61,[2,87],{76:$VF,77:$VG}),o($V91,[2,88],{76:$VF,77:$VG,80:$VJ,82:$VL,83:$VM,84:$VN}),o($V91,[2,89],{76:$VF,77:$VG,80:$VJ,82:$VL,83:$VM,84:$VN}),o($V61,[2,90],{76:$VF,77:$VG}),o($V61,[2,91],{76:$VF,77:$VG}),o($V61,[2,92],{76:$VF,77:$VG}),o($Va1,[2,93],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN}),o($Va1,[2,94],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN}),o($Va1,[2,95],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN}),o($Va1,[2,96],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN}),o($Va1,[2,97],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN}),o($Va1,[2,98],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN}),o([16,23,26,30,57,91,92,101],[2,99],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT}),o([16,23,26,30,57,92,101],[2,100],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU}),{57:[1,166],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{29:[1,167]},{26:$Vb1,30:[1,168]},o($VX,[2,34]),o($Vc1,[2,36],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW}),{29:[1,170]},o($VX,[2,120]),{29:[1,171]},{30:[1,172],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{30:[1,173],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{30:[1,174],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{30:[1,175],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{30:[1,176],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{12:53,13:$Vi,15:140,28:177,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,51:178,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:179,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{19:[1,198]},o($VD,[2,29]),o($V11,[2,31],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW}),o($VD,[2,30]),o($Vk1,[2,42],{50:[1,199]}),{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,51:200,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:179,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($VD,[2,46]),o($VD,[2,47]),o($VD,[2,48]),{16:[1,201]},{13:$Vl1,14:$Ve,29:$VZ},{16:[1,203]},{12:53,13:$Vi,15:140,28:204,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($VD,[2,11]),o($V31,[2,13]),{12:53,13:$Vi,15:205,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:140,28:207,29:$Vj,30:[1,206],31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($VX,[2,33]),{12:53,13:$Vi,15:208,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:140,28:210,29:$Vj,30:[1,209],31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:211,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($VX,[2,38]),o($VX,[2,39]),o($VX,[2,40]),o($VX,[2,41]),o($VX,[2,68]),{26:$Vb1,30:[1,212]},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,21:[1,213],29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:214,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($Vm1,[2,70]),o($Vm1,[2,71]),o($Vm1,[2,72]),o($Vm1,[2,73]),o($Vn1,$V$,{16:[1,215]}),o($Vm1,[2,75]),o($Vm1,[2,76]),o($Vm1,[2,77]),o($Vm1,[2,78]),o($Vm1,[2,79]),{12:53,13:$Vi,15:217,16:[1,216],29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{16:[1,218]},{76:[1,219],77:[1,220],78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{13:$Vc,17:25,22:$Vd,43:$V01},o($Vn1,$VY,{13:$Vl1,14:$Ve,29:$VZ,43:$V_}),{29:[1,221]},{29:[1,222]},{19:[1,223]},{29:[1,224]},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,51:225,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:179,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{7:157,8:158,9:159,11:226,12:9,13:$V71,18:$V1,19:$V81,31:15,32:$V2,33:$V3,34:$V4,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:160,48:$Va,49:227},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,21:[1,228],29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:214,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($VD,[2,49]),{14:$VC},o($VD,[2,12]),{23:[1,229],26:$Vb1},o([16,23,26,30,57],[2,114],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW}),o($VX,[2,110]),{26:$Vb1,30:[1,230]},o($Vc1,[2,35],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW}),o($VX,[2,112]),{26:$Vb1,30:[1,231]},{30:[1,232],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{16:[1,233]},o($Vb,[2,61]),o($Vm1,[2,69]),o($Vm1,[2,74]),o($Vm1,[2,80]),{16:[1,234],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},o($Vm1,[2,82]),o($Vn1,$V41,{16:[1,235]}),o($Vn1,$V51,{16:[1,236]}),{12:53,13:$Vi,15:237,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:238,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,51:239,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:179,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:241,13:$Vo1,15:243,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,65:240,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,21:[1,244],29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:214,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($Vk1,[2,43]),o($Vk1,[2,44]),o($VD,[2,45]),{16:[2,19]},o($VX,[2,111]),o($VX,[2,113]),o($VX,[2,37]),o($VD,[2,21]),o($Vm1,[2,81]),o($Vm1,[2,83]),o($Vm1,[2,84]),{30:[1,245],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{30:[1,246],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,21:[1,247],29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:214,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{16:[1,248]},{13:[1,249],43:$V01},o([16,30,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$VY,{14:[1,250],29:$VZ,43:$V_}),o($Vp1,[2,60],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW}),o($Vb,[2,62]),{19:[1,251]},{19:[1,252]},{60:[1,253]},{12:53,13:$Vi,15:254,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{14:[1,255]},{12:53,13:$Vi,15:256,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{54:257,55:258,56:$Vq1,58:$Vr1},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,51:261,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:179,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{29:[1,262]},{16:[1,263],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{12:53,13:$Vi,15:264,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($Vp1,[2,59],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW}),{21:[1,265],55:266,56:$Vq1,58:$Vr1},o($Vs1,[2,52]),{12:53,13:$Vi,15:267,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:268,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,21:[1,269],29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:214,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:53,13:$Vi,15:270,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{12:241,13:$Vo1,15:243,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,41:49,42:50,45:$Vl,46:$Vm,47:$Vn,65:271,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($Vp1,[2,58],{76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW}),o($Vm1,[2,50]),o($Vs1,[2,51]),{57:[1,272],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{57:[1,273],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},o($Vm1,[2,55]),{30:[1,274],76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,81:$VK,82:$VL,83:$VM,84:$VN,85:$VO,86:$VP,87:$VQ,88:$VR,89:$VS,90:$VT,91:$VU,92:$VV,101:$VW},{30:[1,275]},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,51:276,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:179,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,51:277,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:179,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{16:[1,278]},{19:[1,279]},o($Vs1,[2,53],{31:15,42:50,72:51,66:58,7:180,8:181,9:182,41:183,11:184,52:185,59:186,61:187,63:188,15:191,12:192,73:214,13:$Vd1,18:$V1,29:$Vj,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,45:$Vl,46:$Vm,47:$Vn,48:$Va,53:$Ve1,60:$Vf1,62:$Vg1,64:$Vh1,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB}),o($Vs1,[2,54],{31:15,42:50,72:51,66:58,7:180,8:181,9:182,41:183,11:184,52:185,59:186,61:187,63:188,15:191,12:192,73:214,13:$Vd1,18:$V1,29:$Vj,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,45:$Vl,46:$Vm,47:$Vn,48:$Va,53:$Ve1,60:$Vf1,62:$Vg1,64:$Vh1,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB}),o($Vm1,[2,56]),{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,51:280,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:179,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},{7:180,8:181,9:182,11:184,12:192,13:$Vd1,15:191,18:$V1,21:[1,281],29:$Vj,31:15,32:$V2,33:$V3,34:$Vk,35:$V5,36:$V6,37:$V7,38:$V8,40:$V9,41:183,42:50,45:$Vl,46:$Vm,47:$Vn,48:$Va,52:185,53:$Ve1,59:186,60:$Vf1,61:187,62:$Vg1,63:188,64:$Vh1,66:58,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:51,73:214,74:$Vi1,75:$Vj1,78:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy,98:$Vz,99:$VA,100:$VB},o($Vm1,[2,57])],
defaultActions: {22:[2,1],59:[2,63],60:[2,64],61:[2,65],62:[2,66],63:[2,67],229:[2,19]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://'.*      /* skip comment */
break;
case 2:/* IGNORE */
break;
case 3:return 37;
break;
case 4:return 100;
break;
case 5:return 32;
break;
case 6:return 33;
break;
case 7:return 34;
break;
case 8:return 35;
break;
case 9:return 36
break;
case 10:return 96;
break;
case 11:return 97;
break;
case 12:return 18;
break;
case 13:return 40;
break;
case 14:return 38;
break;
case 15:return 67;
break;
case 16:return 69;
break;
case 17:return 70;
break;
case 18:return 71;
break;
case 19:return 'RLOG';
break;
case 20:return 68;
break;
case 21:return 45;
break;
case 22:return 46;
break;
case 23:return 47;
break;
case 24:return 74;
break;
case 25:return 48;
break;
case 26:return 50;
break;
case 27:return 53;
break;
case 28:return 56;
break;
case 29:return 58;
break;
case 30:return 60;
break;
case 31:return 62;
break;
case 32:return 64;
break;
case 33:return 'RIN';
break;
case 34:return 'RPUSH';
break;
case 35:return 'RPOP';
break;
case 36:return 'RLENGTH';
break;
case 37:return 44;
break;
case 38:return 75;
break;
case 39:return 'RCONTINUE';
break;
case 40:return 57;
break;
case 41:return 43;
break;
case 42:return 26;
break;
case 43:return 16;
break;
case 44:return 19;
break;
case 45:return 21;
break;
case 46:return 29;
break;
case 47:return 30;
break;
case 48:return 22;
break;
case 49:return 23;
break;
case 50:return 84;
break;
case 51:return 76;
break;
case 52:return 77;
break;
case 53:return 81;
break;
case 54:return 80;
break;
case 55:return 78;
break;
case 56:return 82;
break;
case 57:return 83;
break;
case 58:return 87;
break;
case 59:return 88;
break;
case 60:return 89;
break;
case 61:return 90;
break;
case 62:return 85;
break;
case 63:return 86;
break;
case 64:return 91;
break;
case 65:return 79;
break;
case 66:return 92;
break;
case 67:return 93;
break;
case 68:return 14;
break;
case 69:return 101;
break;
case 70: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 98; 
break;
case 71: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 99; 
break;
case 72:return 95;
break;
case 73:return 94;
break;
case 74:return 'BOOLEANO';
break;
case 75:return 13;
break;
case 76:return 5;
break;
case 77:console.log("Lexico", yy_.yytext,  yy_.yylloc.first_line, yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:void\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:struct\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:pow\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:sqrt\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:parse\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:\^)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:false|true\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}