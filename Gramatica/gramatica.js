/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,12],$V2=[1,20],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,18],$Vd=[5,15,20,34,35,36,37,38,39,40,42,50,54,60],$Ve=[1,28],$Vf=[1,30],$Vg=[1,32],$Vh=[15,24,45],$Vi=[2,27],$Vj=[18,28],$Vk=[1,47],$Vl=[1,58],$Vm=[1,62],$Vn=[1,60],$Vo=[1,61],$Vp=[1,63],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,45],$Vw=[1,46],$Vx=[1,48],$Vy=[1,49],$Vz=[1,50],$VA=[1,51],$VB=[1,52],$VC=[1,53],$VD=[1,54],$VE=[1,70],$VF=[5,15,20,23,31,34,35,36,37,38,39,40,42,47,48,49,50,52,54,57,59,60,62,64,67,68,69,70,71,74,75,78,93,94,95,96,97,98,99,100],$VG=[1,84],$VH=[1,102],$VI=[1,103],$VJ=[1,89],$VK=[1,86],$VL=[1,87],$VM=[1,88],$VN=[1,90],$VO=[1,91],$VP=[1,92],$VQ=[1,93],$VR=[1,94],$VS=[1,95],$VT=[1,96],$VU=[1,97],$VV=[1,98],$VW=[1,99],$VX=[1,100],$VY=[1,101],$VZ=[18,25,28,32,58,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$V_=[2,104],$V$=[1,107],$V01=[1,106],$V11=[2,119],$V21=[1,110],$V31=[28,32],$V41=[1,128],$V51=[23,28,32],$V61=[2,117],$V71=[2,118],$V81=[18,25,28,32,58,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$V91=[1,171],$Va1=[1,166],$Vb1=[18,25,28,32,58,78,79,81,85,86,87,88,89,90,91,92,101],$Vc1=[18,25,28,32,58,85,86,87,88,89,90,91,92,101],$Vd1=[1,181],$Ve1=[25,28,32],$Vf1=[1,205],$Vg1=[1,206],$Vh1=[1,207],$Vi1=[1,201],$Vj1=[1,202],$Vk1=[5,15,20,23,31,34,35,36,37,38,39,40,42,47,48,49,50,54,57,59,60,62,64,67,68,69,70,71,74,75,78,93,94,95,96,97,98,99,100],$Vl1=[1,212],$Vm1=[1,215],$Vn1=[1,216],$Vo1=[15,20,23,31,34,35,36,37,38,39,40,42,47,48,49,50,54,57,59,60,62,64,67,68,69,70,71,74,75,78,93,94,95,96,97,98,99,100],$Vp1=[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$Vq1=[23,57,59],$Vr1=[1,258],$Vs1=[18,32];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"impresion":9,"funciones":10,"cond_if":11,"cond_switch":12,"loop_while":13,"tipo":14,"ID":15,"=":16,"expresion":17,";":18,"lista_declaracion":19,"RSTRUCT":20,"{":21,"lista_atributos":22,"}":23,"[":24,"]":25,"id":26,"cuerpo_array":27,",":28,"atributo":29,"lista_parametros":30,"(":31,")":32,"tipo_primitivo":33,"RINT":34,"RDOUBLE":35,"RSTRING":36,"RBOOLEAN":37,"RCHAR":38,"RVOID":39,"RPRINTLN":40,"lista_impresion":41,"RPRINT":42,"llamada":43,"nativas":44,".":45,"RPARSE":46,"RTOINT":47,"RTODOUBLE":48,"RTYPEOF":49,"RIF":50,"bloque_instrucciones":51,"RELSE":52,"instrucciones_dentro":53,"RSWITCH":54,"bloque_switch":55,"estructura_case":56,"RCASE":57,":":58,"RDEFAULT":59,"RWHILE":60,"loop_dowhile":61,"RDO":62,"loop_for":63,"RFOR":64,"declarar_asignar":65,"tipo_func_arit":66,"RPOW":67,"RSQRT":68,"RSIN":69,"RCOS":70,"RTAN":71,"func_arit":72,"instruccion_dentro":73,"RRETURN":74,"RBREAK":75,"++":76,"--":77,"-":78,"&":79,"^":80,"+":81,"*":82,"/":83,"%":84,"<":85,">":86,"<=":87,">=":88,"==":89,"!=":90,"&&":91,"||":92,"!":93,"ENTERO":94,"DECIMAL":95,"RTRUE":96,"RFALSE":97,"CADENA":98,"CARACTER":99,"RNULL":100,"?":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"ID",16:"=",18:";",20:"RSTRUCT",21:"{",23:"}",24:"[",25:"]",26:"id",28:",",31:"(",32:")",34:"RINT",35:"RDOUBLE",36:"RSTRING",37:"RBOOLEAN",38:"RCHAR",39:"RVOID",40:"RPRINTLN",42:"RPRINT",45:".",46:"RPARSE",47:"RTOINT",48:"RTODOUBLE",49:"RTYPEOF",50:"RIF",52:"RELSE",54:"RSWITCH",57:"RCASE",58:":",59:"RDEFAULT",60:"RWHILE",62:"RDO",64:"RFOR",67:"RPOW",68:"RSQRT",69:"RSIN",70:"RCOS",71:"RTAN",74:"RRETURN",75:"RBREAK",76:"++",77:"--",78:"-",79:"&",80:"^",81:"+",82:"*",83:"/",84:"%",85:"<",86:">",87:"<=",88:">=",89:"==",90:"!=",91:"&&",92:"||",93:"!",94:"ENTERO",95:"DECIMAL",96:"RTRUE",97:"RFALSE",98:"CADENA",99:"CARACTER",100:"RNULL",101:"?"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[7,6],[7,7],[22,3],[22,1],[29,2],[29,2],[19,3],[19,1],[27,3],[8,4],[8,8],[14,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[9,5],[9,5],[41,3],[41,1],[43,4],[43,3],[30,3],[30,1],[44,6],[44,4],[44,4],[44,4],[44,4],[11,5],[11,7],[11,7],[51,3],[51,1],[51,1],[51,1],[51,2],[12,7],[55,2],[55,1],[56,4],[56,3],[13,7],[61,9],[63,11],[65,4],[65,3],[65,1],[10,7],[10,8],[66,1],[66,1],[66,1],[66,1],[66,1],[72,4],[53,2],[53,1],[73,1],[73,1],[73,1],[73,2],[73,1],[73,1],[73,1],[73,1],[73,1],[73,2],[73,3],[73,2],[73,3],[73,3],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,5],[17,6],[17,5],[17,6],[17,5],[17,2],[17,2],[17,1],[17,1],[17,1],[17,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new AST($$[$0-1]);
break;
case 2: case 53: case 71:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 34: case 54: case 72:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 8: case 9: case 10: case 24: case 73: case 74: case 75: case 77: case 78:
 this.$ = $$[$0] 
break;
case 11:
 this.$ = new Declaracion([$$[$0-3]],$$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column,$$[$0-1]); 
break;
case 12:
 this.$ = new Declaracion($$[$0-1], $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 19:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 20:
 this.$ = [$$[$0]] 
break;
case 22:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 25:
 this.$ =  Tipo.INT;
break;
case 26:
 this.$ =  Tipo.DOUBLE;
break;
case 27:
 this.$ =  Tipo.STRING;
break;
case 28:
 this.$ =  Tipo.BOOL;
break;
case 29:
 this.$ =  Tipo.CHAR;
break;
case 30:
 this.$ =  Tipo.VOID;
break;
case 32:
 this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 33:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 44:
 this.$ = new If($$[$0-2], $$[$0], [],[], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 45:
 this.$ = new If($$[$0-4], $$[$0-2], [],[$$[$0]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 46:
 this.$ = new If($$[$0-4], $$[$0-2], $$[$0],[], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 47: case 122:
 this.$ = $$[$0-1] 
break;
case 52:
 this.$ = new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 55:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 56:
 this.$ = new Case([],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column,true); 
break;
case 57:
 this.$ = new While($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_colum); 
break;
case 84:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 87:
 this.$ = new Operacion($$[$0],$$[$0],Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 88:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.CONCATENACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.REPETICION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 97:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 98:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 99:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 101:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 102:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 103:
 this.$ = new Operacion($$[$0],$$[$0],Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 104:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 105: case 106:
 this.$ = new Primitivo(Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 107:
 this.$ = new Primitivo(true,  this._$.first_line, this._$.first_column); 
break;
case 108:
 this.$ = new Primitivo(false, this._$.first_line, this._$.first_column); 
break;
case 109: case 110:
 this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 111:
 this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,20:$V1,33:19,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,50:$Va,54:$Vb,60:$Vc},{1:[3]},{5:[1,26],6:27,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,20:$V1,33:19,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,50:$Va,54:$Vb,60:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),{15:$Ve,19:29,24:$Vf},{15:[1,31]},{15:[1,33],16:$Vg},{31:[1,34]},{31:[1,35]},{31:[1,36]},{31:[1,37]},{31:[1,38]},o($Vh,[2,24]),o($Vh,[2,25]),o($Vh,[2,26]),o([15,24],$Vi),o($Vh,[2,28]),o($Vh,[2,29]),o($Vh,[2,30]),{1:[2,1]},o($Vd,[2,2]),o($Vj,[2,20],{16:[1,39]}),{18:[1,40],28:[1,41]},{25:[1,42]},{21:[1,43]},{14:59,15:$Vk,17:44,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{16:$VE,31:[1,71]},{14:59,15:$Vk,17:73,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,41:72,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:74,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:75,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:76,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:77,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:78,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($VF,[2,12]),{15:[1,79]},{26:[1,80]},{14:83,15:$VG,22:81,29:82,33:19,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{18:[1,85],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{14:59,15:$Vk,17:104,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:105,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($VZ,$V_,{31:$V$,45:$V01}),o($VZ,[2,105]),o($VZ,[2,106]),o($VZ,[2,107]),o($VZ,[2,108]),o($VZ,[2,109],{45:[1,108]}),o($VZ,[2,110]),o($VZ,[2,111]),o($VZ,$V11),o($VZ,[2,120]),o($VZ,[2,121]),{14:59,15:$Vk,17:109,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{45:$V21},{31:[1,111]},{31:[1,112]},o($Vh,$Vi,{31:[1,113]}),{31:[1,114]},{31:[1,115]},{31:[2,65]},{31:[2,66]},{31:[2,67]},{31:[2,68]},{31:[2,69]},{15:[1,116]},{14:83,15:$VG,22:118,29:82,32:[1,117],33:19,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{28:[1,120],32:[1,119]},o($V31,[2,34],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY}),{32:[1,121],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{32:[1,122],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{32:[1,123],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{32:[1,124],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{18:[1,125],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},o($Vj,[2,19]),{16:[1,126]},{23:[1,127],28:$V41},o($V51,[2,16]),{15:[1,129]},{15:[1,130]},o($VF,[2,22]),{14:59,15:$Vk,17:131,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:132,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:133,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:134,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:135,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:136,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:137,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:138,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:139,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:140,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:141,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:142,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:143,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:144,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:145,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:146,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($VZ,$V61),o($VZ,$V71),o($V81,[2,87],{76:$VH,77:$VI}),o($V81,[2,103],{76:$VH,77:$VI}),{15:[1,147]},{14:59,15:$Vk,17:150,30:148,31:$Vl,32:[1,149],33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{15:[1,151]},{32:[1,152],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{46:[1,153]},{14:59,15:$Vk,17:154,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:155,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:156,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:157,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:158,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{31:[1,159]},{21:[1,160]},{28:$V41,32:[1,161]},{18:[1,162]},{14:59,15:$Vk,17:163,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{18:[1,164]},{7:167,8:168,9:169,14:11,15:$V91,20:$V1,21:$Va1,33:19,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:170,51:165},{21:[1,172]},{21:[1,173]},o($VF,[2,11]),{24:[1,175],27:174},{18:[1,176]},{14:83,15:$VG,29:177,33:19,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},o($V51,[2,17]),o($V51,[2,18]),o($Vb1,[2,88],{76:$VH,77:$VI,80:$VL,82:$VN,83:$VO,84:$VP}),o($V81,[2,89],{76:$VH,77:$VI}),o($Vb1,[2,90],{76:$VH,77:$VI,80:$VL,82:$VN,83:$VO,84:$VP}),o($Vb1,[2,91],{76:$VH,77:$VI,80:$VL,82:$VN,83:$VO,84:$VP}),o($V81,[2,92],{76:$VH,77:$VI}),o($V81,[2,93],{76:$VH,77:$VI}),o($V81,[2,94],{76:$VH,77:$VI}),o($Vc1,[2,95],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP}),o($Vc1,[2,96],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP}),o($Vc1,[2,97],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP}),o($Vc1,[2,98],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP}),o($Vc1,[2,99],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP}),o($Vc1,[2,100],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP}),o([18,25,28,32,58,91,92,101],[2,101],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV}),o([18,25,28,32,58,92,101],[2,102],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW}),{58:[1,178],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{31:[1,179]},{28:$Vd1,32:[1,180]},o($VZ,[2,36]),o($Ve1,[2,38],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY}),{31:[1,182]},o($VZ,[2,122]),{31:[1,183]},{32:[1,184],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{32:[1,185],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{32:[1,186],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{32:[1,187],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{32:[1,188],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{14:59,15:$Vk,17:150,30:189,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,53:190,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:191,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{21:[1,208]},o($VF,[2,31]),o($V31,[2,33],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY}),o($VF,[2,32]),o($Vk1,[2,44],{52:[1,209]}),{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,53:210,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:191,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($VF,[2,48]),o($VF,[2,49]),o($VF,[2,50]),{18:[1,211]},{15:$Vl1,16:$Vg,31:$V$},{55:213,56:214,57:$Vm1,59:$Vn1},{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,53:217,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:191,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{18:[1,218]},{14:59,15:$Vk,17:150,30:219,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($VF,[2,13]),o($V51,[2,15]),{14:59,15:$Vk,17:220,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:150,30:222,31:$Vl,32:[1,221],33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($VZ,[2,35]),{14:59,15:$Vk,17:223,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:150,30:225,31:$Vl,32:[1,224],33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:59,15:$Vk,17:226,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($VZ,[2,40]),o($VZ,[2,41]),o($VZ,[2,42]),o($VZ,[2,43]),o($VZ,[2,70]),{28:$Vd1,32:[1,227]},{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,23:[1,228],31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:229,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($Vo1,[2,72]),o($Vo1,[2,73]),o($Vo1,[2,74]),o($Vo1,[2,75]),o($Vp1,$V11,{18:[1,230]}),o($Vo1,[2,77]),o($Vo1,[2,78]),o($Vo1,[2,79]),o($Vo1,[2,80]),o($Vo1,[2,81]),{14:59,15:$Vk,17:232,18:[1,231],31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{18:[1,233]},{76:[1,234],77:[1,235],78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{15:$Ve,19:29,24:$Vf,45:$V21},o($Vp1,$V_,{15:$Vl1,16:$Vg,31:$V$,45:$V01}),{21:[1,236]},{31:[1,237]},{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,53:238,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:191,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{7:167,8:168,9:169,11:239,14:11,15:$V91,20:$V1,21:$Va1,33:19,34:$V2,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:170,50:$Va,51:240},{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,23:[1,241],31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:229,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($VF,[2,51]),{16:$VE},{23:[1,242],56:243,57:$Vm1,59:$Vn1},o($Vq1,[2,54]),{14:59,15:$Vk,17:244,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{58:[1,245]},{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,23:[1,246],31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:229,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($VF,[2,14]),{25:[1,247],28:$Vd1},o([18,25,28,32,58],[2,116],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY}),o($VZ,[2,112]),{28:$Vd1,32:[1,248]},o($Ve1,[2,37],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY}),o($VZ,[2,114]),{28:$Vd1,32:[1,249]},{32:[1,250],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{18:[1,251]},o($Vd,[2,63]),o($Vo1,[2,71]),o($Vo1,[2,76]),o($Vo1,[2,82]),{18:[1,252],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},o($Vo1,[2,84]),o($Vp1,$V61,{18:[1,253]}),o($Vp1,$V71,{18:[1,254]}),{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,53:255,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:191,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:257,15:$Vr1,17:259,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,65:256,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,23:[1,260],31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:229,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($Vk1,[2,45]),o($Vk1,[2,46]),o($VF,[2,47]),o($Vk1,[2,52]),o($Vq1,[2,53]),{58:[1,261],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,53:262,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:191,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($Vk1,[2,57]),{18:[2,21]},o($VZ,[2,113]),o($VZ,[2,115]),o($VZ,[2,39]),o($VF,[2,23]),o($Vo1,[2,83]),o($Vo1,[2,85]),o($Vo1,[2,86]),{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,23:[1,263],31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:229,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{18:[1,264]},{15:[1,265],45:$V21},o([18,32,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$V_,{16:[1,266],31:$V$,45:$V01}),o($Vs1,[2,62],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY}),o($Vd,[2,64]),{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,53:267,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:191,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($Vq1,[2,56],{33:19,44:56,72:57,66:64,7:192,8:193,9:194,43:195,11:196,12:197,13:198,61:199,63:200,17:203,14:204,73:229,15:$Vf1,20:$V1,31:$Vl,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,47:$Vn,48:$Vo,49:$Vp,50:$Va,54:$Vb,60:$Vc,62:$Vg1,64:$Vh1,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD}),{60:[1,268]},{14:59,15:$Vk,17:269,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{16:[1,270]},{14:59,15:$Vk,17:271,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($Vq1,[2,55],{33:19,44:56,72:57,66:64,7:192,8:193,9:194,43:195,11:196,12:197,13:198,61:199,63:200,17:203,14:204,73:229,15:$Vf1,20:$V1,31:$Vl,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,47:$Vn,48:$Vo,49:$Vp,50:$Va,54:$Vb,60:$Vc,62:$Vg1,64:$Vh1,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD}),{31:[1,272]},{18:[1,273],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{14:59,15:$Vk,17:274,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($Vs1,[2,61],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY}),{14:59,15:$Vk,17:275,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{14:257,15:$Vr1,17:259,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,43:55,44:56,47:$Vn,48:$Vo,49:$Vp,65:276,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($Vs1,[2,60],{76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY}),{32:[1,277],76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU,90:$VV,91:$VW,92:$VX,101:$VY},{32:[1,278]},{18:[1,279]},{21:[1,280]},o($Vo1,[2,58]),{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,53:281,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:191,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},{7:192,8:193,9:194,11:196,12:197,13:198,14:204,15:$Vf1,17:203,20:$V1,23:[1,282],31:$Vl,33:19,34:$V2,35:$V3,36:$Vm,37:$V5,38:$V6,39:$V7,40:$V8,42:$V9,43:195,44:56,47:$Vn,48:$Vo,49:$Vp,50:$Va,54:$Vb,60:$Vc,61:199,62:$Vg1,63:200,64:$Vh1,66:64,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:57,73:229,74:$Vi1,75:$Vj1,78:$Vv,93:$Vw,94:$Vx,95:$Vy,96:$Vz,97:$VA,98:$VB,99:$VC,100:$VD},o($Vo1,[2,59])],
defaultActions: {26:[2,1],65:[2,65],66:[2,66],67:[2,67],68:[2,68],69:[2,69],247:[2,21]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://'.*      /* skip comment */
break;
case 2:/* IGNORE */
break;
case 3:return 39;
break;
case 4:return 100;
break;
case 5:return 34;
break;
case 6:return 35;
break;
case 7:return 36;
break;
case 8:return 37;
break;
case 9:return 38
break;
case 10:return 96;
break;
case 11:return 97;
break;
case 12:return 20;
break;
case 13:return 42;
break;
case 14:return 40;
break;
case 15:return 67;
break;
case 16:return 69;
break;
case 17:return 70;
break;
case 18:return 71;
break;
case 19:return 'RLOG';
break;
case 20:return 68;
break;
case 21:return 47;
break;
case 22:return 48;
break;
case 23:return 49;
break;
case 24:return 74;
break;
case 25:return 50;
break;
case 26:return 52;
break;
case 27:return 54;
break;
case 28:return 57;
break;
case 29:return 59;
break;
case 30:return 60;
break;
case 31:return 62;
break;
case 32:return 64;
break;
case 33:return 'RIN';
break;
case 34:return 'RPUSH';
break;
case 35:return 'RPOP';
break;
case 36:return 'RLENGTH';
break;
case 37:return 46;
break;
case 38:return 75;
break;
case 39:return 'RCONTINUE';
break;
case 40:return 58;
break;
case 41:return 45;
break;
case 42:return 28;
break;
case 43:return 18;
break;
case 44:return 21;
break;
case 45:return 23;
break;
case 46:return 31;
break;
case 47:return 32;
break;
case 48:return 24;
break;
case 49:return 25;
break;
case 50:return 84;
break;
case 51:return 76;
break;
case 52:return 77;
break;
case 53:return 81;
break;
case 54:return 80;
break;
case 55:return 78;
break;
case 56:return 82;
break;
case 57:return 83;
break;
case 58:return 87;
break;
case 59:return 88;
break;
case 60:return 89;
break;
case 61:return 90;
break;
case 62:return 85;
break;
case 63:return 86;
break;
case 64:return 91;
break;
case 65:return 79;
break;
case 66:return 92;
break;
case 67:return 93;
break;
case 68:return 16;
break;
case 69:return 101;
break;
case 70: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 98; 
break;
case 71: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 99; 
break;
case 72:return 95;
break;
case 73:return 94;
break;
case 74:return 'BOOLEANO';
break;
case 75:return 15;
break;
case 76:return 5;
break;
case 77:console.log("Lexico", yy_.yytext,  yy_.yylloc.first_line, yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:void\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:struct\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:pow\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:sqrt\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:parse\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:\^)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:false|true\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}