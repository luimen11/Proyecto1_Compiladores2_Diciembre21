/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,11],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,13],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[5,14,19,33,34,35,36,37,38,39,41,49,53],$Vd=[1,26],$Ve=[1,28],$Vf=[1,30],$Vg=[14,23,44],$Vh=[2,26],$Vi=[17,27],$Vj=[1,44],$Vk=[1,55],$Vl=[1,59],$Vm=[1,57],$Vn=[1,58],$Vo=[1,60],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,42],$Vv=[1,43],$Vw=[1,45],$Vx=[1,46],$Vy=[1,47],$Vz=[1,48],$VA=[1,49],$VB=[1,50],$VC=[1,51],$VD=[1,67],$VE=[5,14,19,22,30,33,34,35,36,37,38,39,41,46,47,48,49,51,53,56,58,60,62,64,67,68,69,70,71,74,75,78,93,94,95,96,97,98,99,100],$VF=[1,80],$VG=[1,98],$VH=[1,99],$VI=[1,85],$VJ=[1,82],$VK=[1,83],$VL=[1,84],$VM=[1,86],$VN=[1,87],$VO=[1,88],$VP=[1,89],$VQ=[1,90],$VR=[1,91],$VS=[1,92],$VT=[1,93],$VU=[1,94],$VV=[1,95],$VW=[1,96],$VX=[1,97],$VY=[17,24,27,31,57,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$VZ=[2,103],$V_=[1,103],$V$=[1,102],$V01=[2,118],$V11=[1,106],$V21=[27,31],$V31=[1,123],$V41=[22,27,31],$V51=[2,116],$V61=[2,117],$V71=[17,24,27,31,57,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$V81=[1,166],$V91=[1,161],$Va1=[17,24,27,31,57,78,79,81,85,86,87,88,89,90,91,92,101],$Vb1=[17,24,27,31,57,85,86,87,88,89,90,91,92,101],$Vc1=[1,175],$Vd1=[24,27,31],$Ve1=[1,199],$Vf1=[1,200],$Vg1=[1,201],$Vh1=[1,202],$Vi1=[1,195],$Vj1=[1,196],$Vk1=[5,14,19,22,30,33,34,35,36,37,38,39,41,46,47,48,49,53,56,58,60,62,64,67,68,69,70,71,74,75,78,93,94,95,96,97,98,99,100],$Vl1=[1,207],$Vm1=[1,210],$Vn1=[1,211],$Vo1=[14,19,22,30,33,34,35,36,37,38,39,41,46,47,48,49,53,56,58,60,62,64,67,68,69,70,71,74,75,78,93,94,95,96,97,98,99,100],$Vp1=[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$Vq1=[22,56,58],$Vr1=[1,253],$Vs1=[17,31];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"impresion":9,"funciones":10,"cond_if":11,"cond_switch":12,"tipo":13,"ID":14,"=":15,"expresion":16,";":17,"lista_declaracion":18,"RSTRUCT":19,"{":20,"lista_atributos":21,"}":22,"[":23,"]":24,"id":25,"cuerpo_array":26,",":27,"atributo":28,"lista_parametros":29,"(":30,")":31,"tipo_primitivo":32,"RINT":33,"RDOUBLE":34,"RSTRING":35,"RBOOLEAN":36,"RCHAR":37,"RVOID":38,"RPRINTLN":39,"lista_impresion":40,"RPRINT":41,"llamada":42,"nativas":43,".":44,"RPARSE":45,"RTOINT":46,"RTODOUBLE":47,"RTYPEOF":48,"RIF":49,"bloque_instrucciones":50,"RELSE":51,"instrucciones_dentro":52,"RSWITCH":53,"bloque_switch":54,"estructura_case":55,"RCASE":56,":":57,"RDEFAULT":58,"loop_while":59,"RWHILE":60,"loop_dowhile":61,"RDO":62,"loop_for":63,"RFOR":64,"declarar_asignar":65,"tipo_func_arit":66,"RPOW":67,"RSQRT":68,"RSIN":69,"RCOS":70,"RTAN":71,"func_arit":72,"instruccion_dentro":73,"RRETURN":74,"RBREAK":75,"++":76,"--":77,"-":78,"&":79,"^":80,"+":81,"*":82,"/":83,"%":84,"<":85,">":86,"<=":87,">=":88,"==":89,"!=":90,"&&":91,"||":92,"!":93,"ENTERO":94,"DECIMAL":95,"RTRUE":96,"RFALSE":97,"CADENA":98,"CARACTER":99,"RNULL":100,"?":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"ID",15:"=",17:";",19:"RSTRUCT",20:"{",22:"}",23:"[",24:"]",25:"id",27:",",30:"(",31:")",33:"RINT",34:"RDOUBLE",35:"RSTRING",36:"RBOOLEAN",37:"RCHAR",38:"RVOID",39:"RPRINTLN",41:"RPRINT",44:".",45:"RPARSE",46:"RTOINT",47:"RTODOUBLE",48:"RTYPEOF",49:"RIF",51:"RELSE",53:"RSWITCH",56:"RCASE",57:":",58:"RDEFAULT",60:"RWHILE",62:"RDO",64:"RFOR",67:"RPOW",68:"RSQRT",69:"RSIN",70:"RCOS",71:"RTAN",74:"RRETURN",75:"RBREAK",76:"++",77:"--",78:"-",79:"&",80:"^",81:"+",82:"*",83:"/",84:"%",85:"<",86:">",87:"<=",88:">=",89:"==",90:"!=",91:"&&",92:"||",93:"!",94:"ENTERO",95:"DECIMAL",96:"RTRUE",97:"RFALSE",98:"CADENA",99:"CARACTER",100:"RNULL",101:"?"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[7,6],[7,7],[21,3],[21,1],[28,2],[28,2],[18,3],[18,1],[26,3],[8,4],[8,8],[13,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[9,5],[9,5],[40,3],[40,1],[42,4],[42,3],[29,3],[29,1],[43,6],[43,4],[43,4],[43,4],[43,4],[11,5],[11,7],[11,7],[50,3],[50,1],[50,1],[50,1],[50,2],[12,7],[54,2],[54,1],[55,4],[55,3],[59,7],[61,9],[63,11],[65,4],[65,3],[65,1],[10,7],[10,8],[66,1],[66,1],[66,1],[66,1],[66,1],[72,4],[52,2],[52,1],[73,1],[73,1],[73,1],[73,2],[73,1],[73,1],[73,1],[73,1],[73,1],[73,2],[73,3],[73,2],[73,3],[73,3],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,5],[16,6],[16,5],[16,6],[16,5],[16,2],[16,2],[16,1],[16,1],[16,1],[16,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new AST($$[$0-1]);
break;
case 2: case 52: case 70:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 33: case 53: case 71:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 8: case 9: case 23: case 74: case 76: case 77:
 this.$ = $$[$0] 
break;
case 10:
 this.$ = new Declaracion([$$[$0-3]],$$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column,$$[$0-1]); 
break;
case 11:
 this.$ = new Declaracion($$[$0-1], $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 18:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 19:
 this.$ = [$$[$0]] 
break;
case 21:
 this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 24:
 this.$ =  Tipo.INT;
break;
case 25:
 this.$ =  Tipo.DOUBLE;
break;
case 26:
 this.$ =  Tipo.STRING;
break;
case 27:
 this.$ =  Tipo.BOOL;
break;
case 28:
 this.$ =  Tipo.CHAR;
break;
case 29:
 this.$ =  Tipo.VOID;
break;
case 31:
 this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 32:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 43:
 this.$ = new If($$[$0-2], $$[$0], [],[], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 44:
 this.$ = new If($$[$0-4], $$[$0-2], [],[$$[$0]], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 45:
 this.$ = new If($$[$0-4], $$[$0-2], $$[$0],[], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 46: case 121:
 this.$ = $$[$0-1] 
break;
case 51:
 this.$ = new Switch($$[$0-4],$$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 54:
 this.$ = new Case($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 55:
 this.$ = new Case([],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column,true); 
break;
case 86:
 this.$ = new Operacion($$[$0],$$[$0],Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 87:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.CONCATENACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 88:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.REPETICION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 91:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 97:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 98:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 99:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 101:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 102:
 this.$ = new Operacion($$[$0],$$[$0],Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 103:
 this.$ = new AccesoVariable($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 104: case 105:
 this.$ = new Primitivo(Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
case 106:
 this.$ = new Primitivo(true,  this._$.first_line, this._$.first_column); 
break;
case 107:
 this.$ = new Primitivo(false, this._$.first_line, this._$.first_column); 
break;
case 108: case 109:
 this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 110:
 this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,19:$V1,32:17,33:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,49:$Va,53:$Vb},{1:[3]},{5:[1,24],6:25,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V0,19:$V1,32:17,33:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,49:$Va,53:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),{14:$Vd,18:27,23:$Ve},{14:[1,29]},{14:[1,31],15:$Vf},{30:[1,32]},{30:[1,33]},{30:[1,34]},{30:[1,35]},o($Vg,[2,23]),o($Vg,[2,24]),o($Vg,[2,25]),o([14,23],$Vh),o($Vg,[2,27]),o($Vg,[2,28]),o($Vg,[2,29]),{1:[2,1]},o($Vc,[2,2]),o($Vi,[2,19],{15:[1,36]}),{17:[1,37],27:[1,38]},{24:[1,39]},{20:[1,40]},{13:56,14:$Vj,16:41,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{15:$VD,30:[1,68]},{13:56,14:$Vj,16:70,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,40:69,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:71,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:72,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:73,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:74,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($VE,[2,11]),{14:[1,75]},{25:[1,76]},{13:79,14:$VF,21:77,28:78,32:17,33:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7},{17:[1,81],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{13:56,14:$Vj,16:100,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:101,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($VY,$VZ,{30:$V_,44:$V$}),o($VY,[2,104]),o($VY,[2,105]),o($VY,[2,106]),o($VY,[2,107]),o($VY,[2,108],{44:[1,104]}),o($VY,[2,109]),o($VY,[2,110]),o($VY,$V01),o($VY,[2,119]),o($VY,[2,120]),{13:56,14:$Vj,16:105,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{44:$V11},{30:[1,107]},{30:[1,108]},o($Vg,$Vh,{30:[1,109]}),{30:[1,110]},{30:[1,111]},{30:[2,64]},{30:[2,65]},{30:[2,66]},{30:[2,67]},{30:[2,68]},{14:[1,112]},{13:79,14:$VF,21:114,28:78,31:[1,113],32:17,33:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7},{27:[1,116],31:[1,115]},o($V21,[2,33],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX}),{31:[1,117],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{31:[1,118],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{31:[1,119],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{17:[1,120],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},o($Vi,[2,18]),{15:[1,121]},{22:[1,122],27:$V31},o($V41,[2,15]),{14:[1,124]},{14:[1,125]},o($VE,[2,21]),{13:56,14:$Vj,16:126,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:127,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:128,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:129,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:130,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:131,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:132,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:133,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:134,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:135,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:136,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:137,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:138,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:139,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:140,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:141,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($VY,$V51),o($VY,$V61),o($V71,[2,86],{76:$VG,77:$VH}),o($V71,[2,102],{76:$VG,77:$VH}),{14:[1,142]},{13:56,14:$Vj,16:145,29:143,30:$Vk,31:[1,144],32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{14:[1,146]},{31:[1,147],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{45:[1,148]},{13:56,14:$Vj,16:149,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:150,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:151,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:152,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:153,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{30:[1,154]},{20:[1,155]},{27:$V31,31:[1,156]},{17:[1,157]},{13:56,14:$Vj,16:158,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{17:[1,159]},{7:162,8:163,9:164,13:10,14:$V81,19:$V1,20:$V91,32:17,33:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:165,50:160},{20:[1,167]},o($VE,[2,10]),{23:[1,169],26:168},{17:[1,170]},{13:79,14:$VF,28:171,32:17,33:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7},o($V41,[2,16]),o($V41,[2,17]),o($Va1,[2,87],{76:$VG,77:$VH,80:$VK,82:$VM,83:$VN,84:$VO}),o($V71,[2,88],{76:$VG,77:$VH}),o($Va1,[2,89],{76:$VG,77:$VH,80:$VK,82:$VM,83:$VN,84:$VO}),o($Va1,[2,90],{76:$VG,77:$VH,80:$VK,82:$VM,83:$VN,84:$VO}),o($V71,[2,91],{76:$VG,77:$VH}),o($V71,[2,92],{76:$VG,77:$VH}),o($V71,[2,93],{76:$VG,77:$VH}),o($Vb1,[2,94],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vb1,[2,95],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vb1,[2,96],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vb1,[2,97],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vb1,[2,98],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o($Vb1,[2,99],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO}),o([17,24,27,31,57,91,92,101],[2,100],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU}),o([17,24,27,31,57,92,101],[2,101],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV}),{57:[1,172],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{30:[1,173]},{27:$Vc1,31:[1,174]},o($VY,[2,35]),o($Vd1,[2,37],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX}),{30:[1,176]},o($VY,[2,121]),{30:[1,177]},{31:[1,178],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{31:[1,179],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{31:[1,180],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{31:[1,181],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{31:[1,182],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{13:56,14:$Vj,16:145,29:183,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,52:184,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:185,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{20:[1,203]},o($VE,[2,30]),o($V21,[2,32],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX}),o($VE,[2,31]),o($Vk1,[2,43],{51:[1,204]}),{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,52:205,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:185,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($VE,[2,47]),o($VE,[2,48]),o($VE,[2,49]),{17:[1,206]},{14:$Vl1,15:$Vf,30:$V_},{54:208,55:209,56:$Vm1,58:$Vn1},{17:[1,212]},{13:56,14:$Vj,16:145,29:213,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($VE,[2,12]),o($V41,[2,14]),{13:56,14:$Vj,16:214,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:145,29:216,30:$Vk,31:[1,215],32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($VY,[2,34]),{13:56,14:$Vj,16:217,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:145,29:219,30:$Vk,31:[1,218],32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:220,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($VY,[2,39]),o($VY,[2,40]),o($VY,[2,41]),o($VY,[2,42]),o($VY,[2,69]),{27:$Vc1,31:[1,221]},{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,22:[1,222],30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:223,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($Vo1,[2,71]),o($Vo1,[2,72]),o($Vo1,[2,73]),o($Vo1,[2,74]),o($Vp1,$V01,{17:[1,224]}),o($Vo1,[2,76]),o($Vo1,[2,77]),o($Vo1,[2,78]),o($Vo1,[2,79]),o($Vo1,[2,80]),{13:56,14:$Vj,16:226,17:[1,225],30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{17:[1,227]},{76:[1,228],77:[1,229],78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{14:$Vd,18:27,23:$Ve,44:$V11},o($Vp1,$VZ,{14:$Vl1,15:$Vf,30:$V_,44:$V$}),{30:[1,230]},{20:[1,231]},{30:[1,232]},{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,52:233,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:185,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{7:162,8:163,9:164,11:234,13:10,14:$V81,19:$V1,20:$V91,32:17,33:$V2,34:$V3,35:$V4,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:165,49:$Va,50:235},{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,22:[1,236],30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:223,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($VE,[2,50]),{15:$VD},{22:[1,237],55:238,56:$Vm1,58:$Vn1},o($Vq1,[2,53]),{13:56,14:$Vj,16:239,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{57:[1,240]},o($VE,[2,13]),{24:[1,241],27:$Vc1},o([17,24,27,31,57],[2,115],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX}),o($VY,[2,111]),{27:$Vc1,31:[1,242]},o($Vd1,[2,36],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX}),o($VY,[2,113]),{27:$Vc1,31:[1,243]},{31:[1,244],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{17:[1,245]},o($Vc,[2,62]),o($Vo1,[2,70]),o($Vo1,[2,75]),o($Vo1,[2,81]),{17:[1,246],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},o($Vo1,[2,83]),o($Vp1,$V51,{17:[1,247]}),o($Vp1,$V61,{17:[1,248]}),{13:56,14:$Vj,16:249,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,52:250,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:185,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:252,14:$Vr1,16:254,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,65:251,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,22:[1,255],30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:223,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($Vk1,[2,44]),o($Vk1,[2,45]),o($VE,[2,46]),o($Vk1,[2,51]),o($Vq1,[2,52]),{57:[1,256],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,52:257,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:185,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{17:[2,20]},o($VY,[2,112]),o($VY,[2,114]),o($VY,[2,38]),o($VE,[2,22]),o($Vo1,[2,82]),o($Vo1,[2,84]),o($Vo1,[2,85]),{31:[1,258],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,22:[1,259],30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:223,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{17:[1,260]},{14:[1,261],44:$V11},o([17,31,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,101],$VZ,{15:[1,262],30:$V_,44:$V$}),o($Vs1,[2,61],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX}),o($Vc,[2,63]),{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,52:263,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:185,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($Vq1,[2,55],{32:17,43:53,72:54,66:61,7:186,8:187,9:188,42:189,11:190,12:191,59:192,61:193,63:194,16:197,13:198,73:223,14:$Ve1,19:$V1,30:$Vk,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,46:$Vm,47:$Vn,48:$Vo,49:$Va,53:$Vb,60:$Vf1,62:$Vg1,64:$Vh1,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC}),{20:[1,264]},{60:[1,265]},{13:56,14:$Vj,16:266,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{15:[1,267]},{13:56,14:$Vj,16:268,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($Vq1,[2,54],{32:17,43:53,72:54,66:61,7:186,8:187,9:188,42:189,11:190,12:191,59:192,61:193,63:194,16:197,13:198,73:223,14:$Ve1,19:$V1,30:$Vk,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,46:$Vm,47:$Vn,48:$Vo,49:$Va,53:$Vb,60:$Vf1,62:$Vg1,64:$Vh1,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC}),{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,52:269,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:185,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{30:[1,270]},{17:[1,271],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{13:56,14:$Vj,16:272,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($Vs1,[2,60],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX}),{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,22:[1,273],30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:223,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:56,14:$Vj,16:274,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{13:252,14:$Vr1,16:254,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,42:52,43:53,46:$Vm,47:$Vn,48:$Vo,65:275,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($Vs1,[2,59],{76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX}),o($Vo1,[2,56]),{31:[1,276],76:$VG,77:$VH,78:$VI,79:$VJ,80:$VK,81:$VL,82:$VM,83:$VN,84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT,90:$VU,91:$VV,92:$VW,101:$VX},{31:[1,277]},{17:[1,278]},{20:[1,279]},o($Vo1,[2,57]),{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,52:280,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:185,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},{7:186,8:187,9:188,11:190,12:191,13:198,14:$Ve1,16:197,19:$V1,22:[1,281],30:$Vk,32:17,33:$V2,34:$V3,35:$Vl,36:$V5,37:$V6,38:$V7,39:$V8,41:$V9,42:189,43:53,46:$Vm,47:$Vn,48:$Vo,49:$Va,53:$Vb,59:192,60:$Vf1,61:193,62:$Vg1,63:194,64:$Vh1,66:61,67:$Vp,68:$Vq,69:$Vr,70:$Vs,71:$Vt,72:54,73:223,74:$Vi1,75:$Vj1,78:$Vu,93:$Vv,94:$Vw,95:$Vx,96:$Vy,97:$Vz,98:$VA,99:$VB,100:$VC},o($Vo1,[2,58])],
defaultActions: {24:[2,1],62:[2,64],63:[2,65],64:[2,66],65:[2,67],66:[2,68],241:[2,20]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://'.*      /* skip comment */
break;
case 2:/* IGNORE */
break;
case 3:return 38;
break;
case 4:return 100;
break;
case 5:return 33;
break;
case 6:return 34;
break;
case 7:return 35;
break;
case 8:return 36;
break;
case 9:return 37
break;
case 10:return 96;
break;
case 11:return 97;
break;
case 12:return 19;
break;
case 13:return 41;
break;
case 14:return 39;
break;
case 15:return 67;
break;
case 16:return 69;
break;
case 17:return 70;
break;
case 18:return 71;
break;
case 19:return 'RLOG';
break;
case 20:return 68;
break;
case 21:return 46;
break;
case 22:return 47;
break;
case 23:return 48;
break;
case 24:return 74;
break;
case 25:return 49;
break;
case 26:return 51;
break;
case 27:return 53;
break;
case 28:return 56;
break;
case 29:return 58;
break;
case 30:return 60;
break;
case 31:return 62;
break;
case 32:return 64;
break;
case 33:return 'RIN';
break;
case 34:return 'RPUSH';
break;
case 35:return 'RPOP';
break;
case 36:return 'RLENGTH';
break;
case 37:return 45;
break;
case 38:return 75;
break;
case 39:return 'RCONTINUE';
break;
case 40:return 57;
break;
case 41:return 44;
break;
case 42:return 27;
break;
case 43:return 17;
break;
case 44:return 20;
break;
case 45:return 22;
break;
case 46:return 30;
break;
case 47:return 31;
break;
case 48:return 23;
break;
case 49:return 24;
break;
case 50:return 84;
break;
case 51:return 76;
break;
case 52:return 77;
break;
case 53:return 81;
break;
case 54:return 80;
break;
case 55:return 78;
break;
case 56:return 82;
break;
case 57:return 83;
break;
case 58:return 87;
break;
case 59:return 88;
break;
case 60:return 89;
break;
case 61:return 90;
break;
case 62:return 85;
break;
case 63:return 86;
break;
case 64:return 91;
break;
case 65:return 79;
break;
case 66:return 92;
break;
case 67:return 93;
break;
case 68:return 15;
break;
case 69:return 101;
break;
case 70: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 98; 
break;
case 71: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 99; 
break;
case 72:return 95;
break;
case 73:return 94;
break;
case 74:return 'BOOLEANO';
break;
case 75:return 14;
break;
case 76:return 5;
break;
case 77:console.log("Lexico", yy_.yytext,  yy_.yylloc.first_line, yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:void\b)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:struct\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:pow\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:sqrt\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:parse\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:\^)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:false|true\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}