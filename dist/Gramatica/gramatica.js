/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,11],$V8=[1,12],$V9=[5,12,17,27,28,29,30,31,32,34],$Va=[1,24],$Vb=[12,37],$Vc=[2,22],$Vd=[15,21],$Ve=[1,35],$Vf=[1,46],$Vg=[1,50],$Vh=[1,48],$Vi=[1,49],$Vj=[1,51],$Vk=[1,53],$Vl=[1,54],$Vm=[1,55],$Vn=[1,56],$Vo=[1,57],$Vp=[1,33],$Vq=[1,34],$Vr=[1,36],$Vs=[1,37],$Vt=[1,38],$Vu=[1,39],$Vv=[1,40],$Vw=[1,41],$Vx=[1,42],$Vy=[1,58],$Vz=[5,12,17,20,27,28,29,30,31,32,34,43,48,51,53,62],$VA=[1,68],$VB=[1,72],$VC=[1,70],$VD=[1,71],$VE=[1,73],$VF=[1,74],$VG=[1,75],$VH=[1,76],$VI=[1,77],$VJ=[1,78],$VK=[1,79],$VL=[1,80],$VM=[1,81],$VN=[1,82],$VO=[1,83],$VP=[1,84],$VQ=[1,85],$VR=[15,21,25,52,63,64,65,66,67,68,69,70,71,72,73,74,75,76,85,86],$VS=[1,88],$VT=[21,25],$VU=[1,104],$VV=[20,21,25],$VW=[15,21,25,52,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$VX=[15,21,25,52,63,64,65,69,70,71,72,73,74,75,76],$VY=[15,21,25,52,69,70,71,72,73,74,75,76],$VZ=[1,140],$V_=[1,162],$V$=[1,163],$V01=[1,164],$V11=[1,161],$V21=[12,17,20,27,28,29,30,31,32,34,43,48,51,53,62],$V31=[1,181],$V41=[1,187],$V51=[1,188],$V61=[20,51,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"asignacion":8,"impresion":9,"funciones":10,"tipo":11,"ID":12,"=":13,"expresion":14,";":15,"lista_declaracion":16,"RSTRUCT":17,"{":18,"lista_atributos":19,"}":20,",":21,"atributo":22,"(":23,"lista_parametros":24,")":25,"tipo_primitivo":26,"RINT":27,"RDOUBLE":28,"RSTRING":29,"RBOOLEAN":30,"RCHAR":31,"RPRINTLN":32,"lista_impresion":33,"RPRINT":34,"llamada":35,"nativas":36,".":37,"RPARSE":38,"RTOINT":39,"RTODOUBLE":40,"RTYPEOF":41,"cond_if":42,"RIF":43,"bloque_instrucciones":44,"RELSE":45,"instrucciones_dentro":46,"cond_switch":47,"RSWITCH":48,"bloque_switch":49,"estructura_case":50,"RCASE":51,":":52,"RDEFAULT":53,"tipo_func_arit":54,"RPOW":55,"RSQRT":56,"RSIN":57,"RCOS":58,"RTAN":59,"func_arit":60,"instruccion_dentro":61,"RRETURN":62,"-":63,"&":64,"+":65,"*":66,"/":67,"%":68,"<":69,">":70,"<=":71,">=":72,"==":73,"!=":74,"&&":75,"||":76,"!":77,"ENTERO":78,"DECIMAL":79,"RTRUE":80,"RFALSE":81,"CADENA":82,"CARACTER":83,"RNULL":84,"++":85,"--":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"ID",13:"=",15:";",17:"RSTRUCT",18:"{",20:"}",21:",",23:"(",25:")",27:"RINT",28:"RDOUBLE",29:"RSTRING",30:"RBOOLEAN",31:"RCHAR",32:"RPRINTLN",34:"RPRINT",37:".",38:"RPARSE",39:"RTOINT",40:"RTODOUBLE",41:"RTYPEOF",43:"RIF",45:"RELSE",48:"RSWITCH",51:"RCASE",52:":",53:"RDEFAULT",55:"RPOW",56:"RSQRT",57:"RSIN",58:"RCOS",59:"RTAN",62:"RRETURN",63:"-",64:"&",65:"+",66:"*",67:"/",68:"%",69:"<",70:">",71:"<=",72:">=",73:"==",74:"!=",75:"&&",76:"||",77:"!",78:"ENTERO",79:"DECIMAL",80:"RTRUE",81:"RFALSE",82:"CADENA",83:"CARACTER",84:"RNULL",85:"++",86:"--"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,3],[7,6],[19,3],[19,1],[22,2],[22,2],[16,3],[16,1],[8,4],[8,8],[11,1],[26,1],[26,1],[26,1],[26,1],[26,1],[9,5],[9,5],[33,3],[33,1],[35,4],[35,3],[24,3],[24,1],[36,6],[36,4],[36,4],[36,4],[36,4],[42,5],[42,7],[42,7],[44,3],[47,7],[49,2],[49,1],[50,4],[50,4],[10,7],[10,8],[54,1],[54,1],[54,1],[54,1],[54,1],[60,4],[46,2],[46,1],[61,1],[61,1],[61,1],[61,2],[61,1],[61,1],[61,2],[61,3],[14,2],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,2],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,2],[14,2],[14,1],[14,1],[14,1],[14,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new AST($$[$0-1]);
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 28:
 this.$ = [$$[$0]]; 
break;
case 6:
 this.$ = $$[$0] 
break;
case 26:
 this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 27:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 67:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 82:
 this.$ = new Primitivo(Number($$[$0]), this._$.first_line, this._$.first_column); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,17:$V1,26:13,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,34:$V8},{1:[3]},{5:[1,19],6:20,7:4,8:5,9:6,10:7,11:8,12:$V0,17:$V1,26:13,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,34:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),{12:[1,21],16:22},{12:[1,23]},{12:[1,25],13:$Va},{23:[1,26]},{23:[1,27]},o($Vb,[2,19]),o($Vb,[2,20]),o($Vb,[2,21]),{12:$Vc},o($Vb,[2,23]),o($Vb,[2,24]),{1:[2,1]},o($V9,[2,2]),o($Vd,[2,16],{13:[1,28]}),{15:[1,29],21:[1,30]},{18:[1,31]},{11:47,12:$Ve,14:32,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{13:$Vy,23:[1,59]},{11:47,12:$Ve,14:61,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,33:60,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:62,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:63,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},o($Vz,[2,9]),{12:[1,64]},{11:67,12:$VA,19:65,22:66,26:13,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6},{15:[1,69],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{11:47,12:$Ve,14:86,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:87,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},o($VR,[2,81],{23:$VS}),o($VR,[2,82]),o($VR,[2,83]),o($VR,[2,84]),o($VR,[2,85]),o($VR,[2,86]),o($VR,[2,87]),o($VR,[2,88]),o($VR,[2,91]),o($VR,[2,92]),o($VR,[2,93]),{11:47,12:$Ve,14:89,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{37:[1,90]},{23:[1,91]},{23:[1,92]},{23:[1,93],37:$Vc},{23:[1,94]},{23:[1,95]},{23:[2,49]},{23:[2,50]},{23:[2,51]},{23:[2,52]},{23:[2,53]},{12:[1,96]},{11:67,12:$VA,19:98,22:66,25:[1,97],26:13,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6},{21:[1,100],25:[1,99]},o($VT,[2,28],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ}),{25:[1,101],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{15:[1,102],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},o($Vd,[2,15]),{20:[1,103],21:$VU},o($VV,[2,12]),{12:[1,105]},{12:[1,106]},o($Vz,[2,17]),{11:47,12:$Ve,14:107,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:108,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:109,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:110,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:111,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:112,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:113,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:114,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:115,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:116,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:117,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:118,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:119,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:120,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},o($VR,[2,89]),o($VR,[2,90]),o($VW,[2,65],{85:$VP,86:$VQ}),o($VW,[2,80],{85:$VP,86:$VQ}),{11:47,12:$Ve,14:123,23:$Vf,24:121,25:[1,122],26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{25:[1,124],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{38:[1,125]},{11:47,12:$Ve,14:126,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:127,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:128,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:129,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:130,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{23:[1,131]},{18:[1,132]},{21:$VU,25:[1,133]},{15:[1,134]},{11:47,12:$Ve,14:135,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{15:[1,136]},o($Vz,[2,8]),{15:[1,137]},{11:67,12:$VA,22:138,26:13,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6},o($VV,[2,13]),o($VV,[2,14]),o($VX,[2,66],{66:$VE,67:$VF,68:$VG,85:$VP,86:$VQ}),o($VX,[2,67],{66:$VE,67:$VF,68:$VG,85:$VP,86:$VQ}),o($VX,[2,68],{66:$VE,67:$VF,68:$VG,85:$VP,86:$VQ}),o($VW,[2,69],{85:$VP,86:$VQ}),o($VW,[2,70],{85:$VP,86:$VQ}),o($VW,[2,71],{85:$VP,86:$VQ}),o($VY,[2,72],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,85:$VP,86:$VQ}),o($VY,[2,73],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,85:$VP,86:$VQ}),o($VY,[2,74],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,85:$VP,86:$VQ}),o($VY,[2,75],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,85:$VP,86:$VQ}),o($VY,[2,76],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,85:$VP,86:$VQ}),o($VY,[2,77],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,85:$VP,86:$VQ}),o([15,21,25,52,75,76],[2,78],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,85:$VP,86:$VQ}),o([15,21,25,52,76],[2,79],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,85:$VP,86:$VQ}),{21:$VZ,25:[1,139]},o($VR,[2,30]),o($VT,[2,32],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ}),o($VR,[2,94]),{23:[1,141]},{25:[1,142],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{25:[1,143],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{25:[1,144],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{25:[1,145],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{25:[1,146],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{11:47,12:$Ve,14:123,23:$Vf,24:147,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{46:148},{18:[1,149]},o($Vz,[2,25]),o($VT,[2,27],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ}),o($Vz,[2,26]),o($Vz,[2,10]),o($VV,[2,11]),o($VR,[2,29]),{11:47,12:$Ve,14:150,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:151,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},o($VR,[2,34]),o($VR,[2,35]),o($VR,[2,36]),o($VR,[2,37]),o($VR,[2,54]),{21:$VZ,25:[1,152]},{7:155,8:156,9:157,11:8,12:$V_,17:$V1,20:[1,153],26:13,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,34:$V8,35:158,42:159,43:$V$,47:160,48:$V01,61:154,62:$V11},{46:165},o($VT,[2,31],{63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ}),{25:[1,166],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{15:[1,167]},o($V9,[2,47]),o($V21,[2,55]),o($V21,[2,57]),o($V21,[2,58]),o($V21,[2,59]),{15:[1,168]},o($V21,[2,61]),o($V21,[2,62]),{11:47,12:$Ve,14:170,15:[1,169],23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{12:[1,171],13:$Va,23:$VS},{23:[1,172]},{23:[1,173]},{7:155,8:156,9:157,11:8,12:$V_,17:$V1,20:[1,174],26:13,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,34:$V8,35:158,42:159,43:$V$,47:160,48:$V01,61:154,62:$V11},o($VR,[2,33]),o($Vz,[2,18]),o($V21,[2,60]),o($V21,[2,63]),{15:[1,175],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{13:$Vy},{11:47,12:$Ve,14:176,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:177,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},o($V9,[2,48]),o($V21,[2,64]),{25:[1,178],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{25:[1,179],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{18:$V31,44:180},{18:[1,182]},o($V21,[2,38],{45:[1,183]}),{46:184},{49:185,50:186,51:$V41,53:$V51},{18:$V31,42:189,43:$V$,44:190},{7:155,8:156,9:157,11:8,12:$V_,17:$V1,20:[1,191],26:13,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,34:$V8,35:158,42:159,43:$V$,47:160,48:$V01,61:154,62:$V11},{20:[1,192],50:193,51:$V41,53:$V51},o($V61,[2,44]),{11:47,12:$Ve,14:194,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},{11:47,12:$Ve,14:195,23:$Vf,26:13,27:$V2,28:$V3,29:$Vg,30:$V5,31:$V6,35:43,36:44,39:$Vh,40:$Vi,41:$Vj,54:52,55:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:45,63:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx},o($V21,[2,39]),o($V21,[2,40]),o([12,17,20,27,28,29,30,31,32,34,43,45,48,51,53,62],[2,41]),o($V21,[2,42]),o($V61,[2,43]),{52:[1,196],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{52:[1,197],63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG,69:$VH,70:$VI,71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,76:$VO,85:$VP,86:$VQ},{46:198},{46:199},o($V61,[2,45],{11:8,26:13,61:154,7:155,8:156,9:157,35:158,42:159,47:160,12:$V_,17:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,34:$V8,43:$V$,48:$V01,62:$V11}),o($V61,[2,46],{11:8,26:13,61:154,7:155,8:156,9:157,35:158,42:159,47:160,12:$V_,17:$V1,27:$V2,28:$V3,29:$V4,30:$V5,31:$V6,32:$V7,34:$V8,43:$V$,48:$V01,62:$V11})],
defaultActions: {16:[2,22],19:[2,1],53:[2,49],54:[2,50],55:[2,51],56:[2,52],57:[2,53]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://'.*      /* skip comment */
break;
case 2:/* IGNORE */
break;
case 3:return 84;
break;
case 4:return 27;
break;
case 5:return 28;
break;
case 6:return 29;
break;
case 7:return 30;
break;
case 8:return 31
break;
case 9:return 80;
break;
case 10:return 81;
break;
case 11:return 17;
break;
case 12:return 34;
break;
case 13:return 32;
break;
case 14:return 55;
break;
case 15:return 57;
break;
case 16:return 58;
break;
case 17:return 59;
break;
case 18:return 'RLOG';
break;
case 19:return 56;
break;
case 20:return 39;
break;
case 21:return 40;
break;
case 22:return 41;
break;
case 23:return 62;
break;
case 24:return 43;
break;
case 25:return 45;
break;
case 26:return 48;
break;
case 27:return 51;
break;
case 28:return 53;
break;
case 29:return 'RWHILE';
break;
case 30:return 'RDO';
break;
case 31:return 'RFOR';
break;
case 32:return 'RIN';
break;
case 33:return 'RPUSH';
break;
case 34:return 'RPOP';
break;
case 35:return 'RLENGTH';
break;
case 36:return 38;
break;
case 37:return 'RBREAK';
break;
case 38:return 'RCONTINUE';
break;
case 39:return 52;
break;
case 40:return 37;
break;
case 41:return 21;
break;
case 42:return 15;
break;
case 43:return 18;
break;
case 44:return 20;
break;
case 45:return 23;
break;
case 46:return 25;
break;
case 47:return '[';
break;
case 48:return ']';
break;
case 49:return 68;
break;
case 50:return 85;
break;
case 51:return 86;
break;
case 52:return 65;
break;
case 53:return '^';
break;
case 54:return 63;
break;
case 55:return 66;
break;
case 56:return 67;
break;
case 57:return 71;
break;
case 58:return 72;
break;
case 59:return 73;
break;
case 60:return 74;
break;
case 61:return 69;
break;
case 62:return 70;
break;
case 63:return 75;
break;
case 64:return 64;
break;
case 65:return 76;
break;
case 66:return 77;
break;
case 67:return 13;
break;
case 68:return '?';
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 82; 
break;
case 70: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 83; 
break;
case 71:return 79;
break;
case 72:return 78;
break;
case 73:return 'BOOLEANO';
break;
case 74:return 12;
break;
case 75:return 5;
break;
case 76:console.log("Lexico", yy_.yytext,  yy_.yylloc.first_line, yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:String\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:struct\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:pow\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:log10\b)/,/^(?:sqrt\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:typeof\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:parse\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?::)/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:\^)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:=)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:false|true\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}